import { Telegraf, Markup } from 'telegraf';
import { writeFile } from 'fs/promises';
import { createReadStream } from 'fs';
import fetch from 'node-fetch';
import { OpenAI } from 'openai';
import { v4 as uuid } from 'uuid';
import dotenv from 'dotenv';
import axios from 'axios';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;
const TIME_DELAY = 400_000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Obsidian API
const OBSIDIAN_API_KEY = process.env.OBSIDIAN_API_KEY || '';
const OBSIDIAN_HOST = process.env.OBSIDIAN_HOST || '127.0.0.1';
const OBSIDIAN_PORT = process.env.OBSIDIAN_PORT || '27123';
const OBSIDIAN_URL = `http://${OBSIDIAN_HOST}:${OBSIDIAN_PORT}`;
const OBSIDIAN_FOLDER = process.env.OBSIDIAN_FOLDER || 'Telegram Voice Notes';

const bot = new Telegraf(TELEGRAM_TOKEN);
const openai = new OpenAI({
    apiKey: OPENAI_KEY,
    timeout: TIME_DELAY, // 5 –º–∏–Ω—É—Ç
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: userId -> boolean (true = —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, false = –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const userPreferences = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤—è–∑–æ–∫: messageId –±–æ—Ç–∞ -> { voiceMessageId, fileId }
const botMessageToVoice = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: userId -> messageId
const deleteRangeStart = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫ –¥–ª—è Obsidian
const transcriptionCache = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ–∂–∏–º–∞
const MODES = {
    WITH_FORMAT: {
        emoji: 'üé®',
        name: '–° —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
        description: '—É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫',
    },
    WITHOUT_FORMAT: {
        emoji: 'üìù',
        name: '–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: '—Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞',
    },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserMode(userId) {
    const withFormatting = userPreferences.get(userId) !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
async function improveReadability(text) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [
                {
                    role: 'system',
                    content:
                        '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è, –ù–û —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:\n' +
                        '1. –°–æ—Ö—Ä–∞–Ω–∏ –Ω–µ –º–µ–Ω–µ–µ 90% –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n' +
                        '2. –ù–ï –º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ñ—Ä–∞–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n' +
                        '3. –ù–ï —Å–æ–∫—Ä–∞—â–∞–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ —É–±–∏—Ä–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n' +
                        '4. –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n' +
                        '5. –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è—Ç—å –∞–±–∑–∞—Ü—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n' +
                        '6. –ú–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n' +
                        '–¢–≤–æ—è —Ü–µ–ª—å - —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.',
                },
                {
                    role: 'user',
                    content: `–£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${text}`,
                },
            ],
        });

        return response.choices[0].message.content.trim();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏:', error);
        return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫ —Ç–µ–∫—Å—Ç—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
async function createTitle(text) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [
                {
                    role: 'system',
                    content:
                        '–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∏ –º—ã—Å–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n\n' +
                        '1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π/—Ç–µ–º –≤ —Ç–µ–∫—Å—Ç–µ:\n' +
                        '   - –ï—Å–ª–∏ 1 —Ç–µ–º–∞ ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (3-5 —Å–ª–æ–≤)\n' +
                        '   - –ï—Å–ª–∏ 2-3 —Ç–µ–º—ã ‚Üí —Å—Ä–µ–¥–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (6-10 —Å–ª–æ–≤)\n' +
                        '   - –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–µ–º ‚Üí –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (10-15 —Å–ª–æ–≤)\n\n' +
                        '2. –í–∫–ª—é—á–∞–π –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n' +
                        '3. –î–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É –∑–∞–º–µ—Ç–∫–∏\n' +
                        '4. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã\n' +
                        '5. –°–æ–∑–¥–∞–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ "—Ç—ç–≥" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –≤ –±—É–¥—É—â–µ–º\n\n' +
                        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
                        '- –û–¥–Ω–∞ —Ç–µ–º–∞: "–ò–¥–µ—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"\n' +
                        '- –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º: "–ü–ª–∞–Ω—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç, –≤—Å—Ç—Ä–µ—á–∞ —Å –ò–≤–∞–Ω–æ–º, –±—é–¥–∂–µ—Ç"\n' +
                        '- –ú–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π: "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: –∏—Ö —Ü–µ–Ω—ã, –Ω–∞—à USP, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è"',
                },
                {
                    role: 'user',
                    content: `–°–æ–∑–¥–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–π –ª–∏—á–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏: ${text}`,
                },
            ],
        });

        return response.choices[0].message.content.trim().replace(/"/g, ''); // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞:', error);
        return '–ó–∞–º–µ—Ç–∫–∞';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
function splitLongText(text, maxLength = 3500) {
    const parts = [];
    let currentPart = '';
    const lines = text.split('\n');

    for (const line of lines) {
        if ((currentPart + line + '\n').length > maxLength) {
            if (currentPart) {
                parts.push(currentPart.trim());
                currentPart = '';
            }
            // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–µ–µ maxLength, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë –ø–æ —Å–ª–æ–≤–∞–º
            if (line.length > maxLength) {
                const words = line.split(' ');
                let currentLine = '';
                for (const word of words) {
                    if ((currentLine + word + ' ').length > maxLength) {
                        parts.push(currentLine.trim());
                        currentLine = word + ' ';
                    } else {
                        currentLine += word + ' ';
                    }
                }
                if (currentLine) {
                    currentPart = currentLine;
                }
            } else {
                currentPart = line + '\n';
            }
        } else {
            currentPart += line + '\n';
        }
    }

    if (currentPart) {
        parts.push(currentPart.trim());
    }

    return parts;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline keyboard
function createTranscriptKeyboard(messageId) {
    return Markup.inlineKeyboard([
        [
            Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É', `add_note_${messageId}`),
            Markup.button.callback('üéôÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ', `keep_voice_${messageId}`),
        ],
    ]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian
async function createObsidianNote(data) {
    try {
        const date = new Date(data.timestamp);
        
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        const filename = `${data.title}.md`;
        const filepath = `${OBSIDIAN_FOLDER}/${filename}`;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è properties (YYYY-MM-DD HH:MM)
        const formattedDate = date.toISOString().slice(0, 16).replace('T', ' ');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Obsidian
        const content = `---
title: "${data.title}"
date: ${formattedDate}
tags: [tg-transcript]
source: telegram-voice
mode: ${data.mode}
---

# ${data.title}

${data.content}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Obsidian API
        const response = await axios.put(`${OBSIDIAN_URL}/vault/${encodeURIComponent(filepath)}`, content, {
            headers: {
                Authorization: `Bearer ${OBSIDIAN_API_KEY}`,
                'Content-Type': 'text/markdown',
            },
        });

        return { success: true, filepath };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian:', error);
        return { success: false, error: error.message };
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è processVoice
async function processVoice(ctx, fileId, voiceMessageId, withFormatting) {
    const mode = withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
    const loadingMessage = await ctx.reply(`${mode.emoji} ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤ —Ä–µ–∂–∏–º–µ "${mode.name}"...`, {
        reply_to_message_id: voiceMessageId,
    });

    try {
        const link = await ctx.telegram.getFileLink(fileId);
        const res = await fetch(link.href);
        const buffer = await res.arrayBuffer();
        const tmpPath = `/tmp/${uuid()}.ogg`;
        await writeFile(tmpPath, Buffer.from(buffer));

        const rawTranscript = await openai.audio.transcriptions.create({
            model: 'whisper-1',
            file: createReadStream(tmpPath),
            response_format: 'text',
            language: 'ru',
        });

        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ:', deleteError.message);
        }

        let messageContent;
        let title = '';

        if (withFormatting) {
            const improvedTranscript = await improveReadability(rawTranscript);
            title = await createTitle(improvedTranscript);
            messageContent = improvedTranscript;
        } else {
            messageContent = rawTranscript;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        const fullMessage = withFormatting
            ? `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n\n**–ó–∞–≥–æ–ª–æ–≤–æ–∫:**\n\`${title}\`\n\n**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\`\`\`\n${messageContent}\n\`\`\``
            : `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n\n**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\`\`\`\n${messageContent}\n\`\`\``;

        let botReply;

        if (fullMessage.length > 4000) {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —á–∞—Å—Ç—è–º–∏ –∏–ª–∏ —Ñ–∞–π–ª–æ–º
            const filename = `transcript_${new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-')}.txt`;
            const fileContent = withFormatting ? `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}\n\n${messageContent}` : messageContent;

            const tmpFilePath = `/tmp/${filename}`;
            await writeFile(tmpFilePath, fileContent, 'utf8');

            botReply = await ctx.replyWithDocument(
                { source: tmpFilePath, filename: filename },
                {
                    caption:
                        `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n\n` +
                        (withFormatting ? `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\`\n\n` : '') +
                        `üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.`,
                    parse_mode: 'Markdown',
                    reply_to_message_id: voiceMessageId,
                    ...createTranscriptKeyboard(voiceMessageId),
                }
            );

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try {
                const fs = await import('fs/promises');
                await fs.unlink(tmpFilePath);
            } catch (err) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', err.message);
            }
        } else {
            // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
            botReply = await ctx.reply(fullMessage, {
                parse_mode: 'Markdown',
                reply_to_message_id: voiceMessageId,
                ...createTranscriptKeyboard(voiceMessageId),
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
            content: messageContent,
            timestamp: new Date(),
            userId: ctx.from.id,
            mode: mode.name,
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∫—É —Å fileId
        botMessageToVoice.set(botReply.message_id, { voiceMessageId, fileId });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        setTimeout(() => {
            transcriptionCache.delete(cacheId);
        }, 30 * 60 * 1000);

        return botReply;
    } catch (error) {
        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ:', deleteError.message);
        }
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É"
bot.action(/add_note_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
    const transcriptionData = transcriptionCache.get(cacheId);

    if (!transcriptionData) {
        await ctx.answerCbQuery('‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Obsidian
    if (!OBSIDIAN_API_KEY) {
        await ctx.answerCbQuery('‚ùå API –∫–ª—é—á Obsidian –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        await ctx.editMessageReplyMarkup();
        await ctx.reply('‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Obsidian –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env:\nOBSIDIAN_API_KEY=–≤–∞—à_–∫–ª—é—á');
        return;
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –≤ Obsidian
        const result = await createObsidianNote(transcriptionData);

        if (result.success) {
            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await ctx.editMessageReplyMarkup();
            await ctx.answerCbQuery('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Obsidian!');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const confirmMsg = await ctx.reply(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Obsidian!\nüìÅ –ü—É—Ç—å: \`${result.filepath}\``, { parse_mode: 'Markdown' });

            // –û—á–∏—â–∞–µ–º –∫—ç—à
            transcriptionCache.delete(cacheId);
        } else {
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏');
            console.error('–û—à–∏–±–∫–∞ Obsidian:', result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:', error);
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Obsidian');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ"
bot.action(/keep_voice_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const cacheId = `${ctx.chat.id}_${voiceMessageId}`;

    // –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await ctx.editMessageReplyMarkup();
    await ctx.answerCbQuery('üëå –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');

    // –û—á–∏—â–∞–µ–º –∫—ç—à
    transcriptionCache.delete(cacheId);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(
        `ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!*\n\n` +
            `${mode.emoji} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *${mode.name}*\n\n` +
            `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `/format - —Ä–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ${MODES.WITH_FORMAT.emoji}\n` +
            `/noformat - —Ä–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${MODES.WITHOUT_FORMAT.emoji}\n` +
            `/toggle - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞\n` +
            `/mode - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n` +
            `/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n` +
            `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏! üéôÔ∏è`,
        { parse_mode: 'Markdown' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.command('format', async (ctx) => {
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
                userPreferences.set(userId, true);

                // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);

                // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                botMessageToVoice.delete(botMessage.message_id);

                // –ü–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                await processVoice(ctx, voiceData.fileId, voiceData.voiceMessageId, true);

                return;
            } catch (error) {
                console.error('Error processing format command:', error);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                return;
            }
        }
    }

    // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    userPreferences.set(userId, true);
    ctx.reply(
        `${MODES.WITH_FORMAT.emoji} *–†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: ${MODES.WITH_FORMAT.name}*\n\n–í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.`,
        {
            parse_mode: 'Markdown',
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.command('noformat', async (ctx) => {
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
                userPreferences.set(userId, false);

                // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);

                // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                botMessageToVoice.delete(botMessage.message_id);

                // –ü–µ—Ä–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                await processVoice(ctx, voiceData.fileId, voiceData.voiceMessageId, false);

                return;
            } catch (error) {
                console.error('Error processing noformat command:', error);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                return;
            }
        }
    }

    // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    userPreferences.set(userId, false);
    ctx.reply(
        `${MODES.WITHOUT_FORMAT.emoji} *–†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: ${MODES.WITHOUT_FORMAT.name}*\n\n–í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        {
            parse_mode: 'Markdown',
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
bot.command('toggle', (ctx) => {
    const userId = ctx.from.id;
    const currentMode = userPreferences.get(userId) !== false;
    userPreferences.set(userId, !currentMode);

    const newMode = getUserMode(userId);
    ctx.reply(`${newMode.emoji} *–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${newMode.name}*\n\n${newMode.description}`, {
        parse_mode: 'Markdown',
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
bot.command('mode', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(`${mode.emoji} *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${mode.name}*\n\n${mode.description}`, {
        parse_mode: 'Markdown',
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
async function handleDelete(ctx) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);

                // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);

                // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await ctx.telegram.deleteMessage(ctx.chat.id, voiceData.voiceMessageId);

                // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                botMessageToVoice.delete(botMessage.message_id);

                return;
            } catch (error) {
                console.error('Error processing delete command:', error);
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                // –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
                return;
            }
        }
    }

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    try {
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
    } catch (error) {
        console.error('Error deleting command message:', error);
    }
}

bot.command('d', handleDelete);
bot.command('del', handleDelete);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
bot.command(['del_start', 'delstart', 'ds'], async (ctx) => {
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = ctx.message.reply_to_message.message_id;
    deleteRangeStart.set(userId, startMessageId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    const confirmMessage = await ctx.reply('‚úÖ –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /del_end –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
        reply_to_message_id: ctx.message.message_id,
    });

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, confirmMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', error);
        }
    }, 5000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è
bot.command(['del_end', 'delend', 'de'], async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∫–æ–Ω—Ü–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const startMessageId = deleteRangeStart.get(userId);
    if (!startMessageId) {
        await ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /del_start', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const endMessageId = ctx.message.reply_to_message.message_id;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ end)
    const fromId = Math.min(startMessageId, endMessageId);
    const toId = Math.max(startMessageId, endMessageId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è
    const progressMessage = await ctx.reply(`üóëÔ∏è –£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID ${fromId} –ø–æ ${toId}...`);

    let deletedCount = 0;
    let failedCount = 0;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    for (let messageId = fromId; messageId <= toId; messageId++) {
        try {
            await ctx.telegram.deleteMessage(chatId, messageId);
            deletedCount++;

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            if (deletedCount % 10 === 0) {
                await new Promise((resolve) => setTimeout(resolve, 100));
            }
        } catch (error) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            failedCount++;
        }
    }

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        await ctx.telegram.deleteMessage(chatId, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    deleteRangeStart.delete(userId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try {
        await ctx.telegram.editMessageText(
            chatId,
            progressMessage.message_id,
            null,
            `‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error);
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(chatId, progressMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', error);
        }
    }, 5000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ (–≤–∫–ª—é—á–∞—è –µ–≥–æ)
bot.command(['del_all', 'delall', 'da'], async (ctx) => {
    const chatId = ctx.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = ctx.message.reply_to_message.message_id;
    const currentMessageId = ctx.message.message_id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è
    const progressMessage = await ctx.reply(`üóëÔ∏è –£–¥–∞–ª—è—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å ID ${startMessageId} (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)...`);

    let deletedCount = 0;
    let failedCount = 0;
    let consecutiveFailures = 0;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ (–≤–∫–ª—é—á–∞—è –µ–≥–æ)
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1000 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ)
    const maxMessageId = currentMessageId + 1000;

    for (let messageId = startMessageId; messageId <= maxMessageId; messageId++) {
        try {
            await ctx.telegram.deleteMessage(chatId, messageId);
            deletedCount++;
            consecutiveFailures = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            if (deletedCount % 10 === 0) {
                await new Promise((resolve) => setTimeout(resolve, 100));
            }
        } catch (error) {
            failedCount++;
            consecutiveFailures++;

            // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if (consecutiveFailures >= 50) {
                console.log(`–ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${consecutiveFailures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥`);
                break;
            }
        }
    }

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        await ctx.telegram.deleteMessage(chatId, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try {
        await ctx.telegram.editMessageText(
            chatId,
            progressMessage.message_id,
            null,
            `‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\nüìç –ù–∞—á–∏–Ω–∞—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${startMessageId}`
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error);
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(chatId, progressMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', error);
        }
    }, 7000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
bot.command(['del_cancel', 'delcancel', 'dc'], async (ctx) => {
    const userId = ctx.from.id;

    if (deleteRangeStart.has(userId)) {
        deleteRangeStart.delete(userId);
        const msg = await ctx.reply('‚ùå –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.');

        // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, msg.message_id);
            } catch (error) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', error);
            }
        }, 3000);
    } else {
        await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
});

bot.on('voice', async (ctx) => {
    try {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const user = ctx.message.from;
        const userId = user.id;
        const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
        console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const withFormatting = userPreferences.get(userId) !== false;
        const fileId = ctx.message.voice.file_id;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const botReply = await processVoice(ctx, fileId, ctx.message.message_id, withFormatting);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const mode = getUserMode(userId);
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
    } catch (err) {
        console.error(err);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
bot.command('help', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(
        `ü§ñ *–ë–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n` +
            `${mode.emoji} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *${mode.name}*\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ.\n\n` +
            `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `${MODES.WITH_FORMAT.emoji} \`/format\` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫)\n` +
            `${MODES.WITHOUT_FORMAT.emoji} \`/noformat\` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)\n` +
            `üîÑ \`/toggle\` - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏\n` +
            `‚ÑπÔ∏è \`/mode\` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n` +
            `üóëÔ∏è \`/d\` –∏–ª–∏ \`/del\` - —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É\n` +
            `üìç \`/del_start\` - –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n` +
            `üìç \`/del_end\` - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω–µ—Ü –∏ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
            `üßπ \`/del_all\` - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ\n` +
            `‚ùå \`/del_cancel\` - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n` +
            `üÜò \`/help\` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
            `üè† \`/start\` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n\n` +
            `üí° *–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:*\n` +
            `${MODES.WITH_FORMAT.emoji} **–° —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:** –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n` +
            `${MODES.WITHOUT_FORMAT.emoji} **–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞\n\n` +
            `üìù *Obsidian –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:*\n` +
            `–ü–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian\n\n` +
            `üí¨ *–°–æ–≤–µ—Ç:* –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /format –∏–ª–∏ /noformat, —á—Ç–æ–±—ã –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ!\n\n` +
            `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:*\n` +
            `‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: /del_start –Ω–∞ –ø–µ—Ä–≤–æ–µ ‚Üí /del_end –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n` +
            `‚Ä¢ –í—Å–µ –ø–æ—Å–ª–µ: /del_all –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí —É–¥–∞–ª–∏—Ç –≤—Å–µ –ø–æ—Å–ª–µ –Ω–µ–≥–æ\n\n` +
            `üìù –¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`,
        { parse_mode: 'Markdown' }
    );
});

bot.launch();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
bot.telegram.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: 'format', description: '–†–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º üé®' },
    { command: 'noformat', description: '–†–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üìù' },
    { command: 'toggle', description: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º' },
    { command: 'mode', description: '–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º' },
    { command: 'd', description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üóëÔ∏è' },
    { command: 'del', description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üóëÔ∏è' },
    { command: 'del_start', description: '–ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è üìç' },
    { command: 'del_end', description: '–ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ üìç' },
    { command: 'del_all', description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è üßπ' },
    { command: 'del_cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚ùå' },
    { command: 'help', description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
]);

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
