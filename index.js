import { Telegraf, Markup } from 'telegraf';
import { writeFile } from 'fs/promises';
import { createReadStream } from 'fs';
import fetch from 'node-fetch';
import { OpenAI } from 'openai';
import { v4 as uuid } from 'uuid';
import dotenv from 'dotenv';
import axios from 'axios';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;
const TIME_DELAY = 400_000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Obsidian API
const OBSIDIAN_API_KEY = process.env.OBSIDIAN_API_KEY || '';
const OBSIDIAN_HOST = process.env.OBSIDIAN_HOST || '127.0.0.1';
const OBSIDIAN_PORT = process.env.OBSIDIAN_PORT || '27123';
const OBSIDIAN_URL = `http://${OBSIDIAN_HOST}:${OBSIDIAN_PORT}`;
const OBSIDIAN_FOLDER = process.env.OBSIDIAN_FOLDER || 'Telegram Voice Notes';

const bot = new Telegraf(TELEGRAM_TOKEN);
const openai = new OpenAI({
    apiKey: OPENAI_KEY,
    timeout: TIME_DELAY,
});

// –•—Ä–∞–Ω–∏–ª–∏—â–∞
const userPreferences = new Map();
const botMessageToVoice = new Map();
const deleteRangeStart = new Map();
const transcriptionCache = new Map();
const tagSelectionState = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤
const tagConfirmationState = new Map(); // –î–æ–±–∞–≤—å—Ç–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ–∂–∏–º–∞
const MODES = {
    WITH_FORMAT: {
        emoji: 'üé®',
        name: '–° —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
        description: '—É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫',
    },
    WITHOUT_FORMAT: {
        emoji: 'üìù',
        name: '–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: '—Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞',
    },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserMode(userId) {
    const withFormatting = userPreferences.get(userId) === true;
    return withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
async function improveReadability(text) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content:
                        '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è, –ù–û —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:\n' +
                        '1. –°–æ—Ö—Ä–∞–Ω–∏ –Ω–µ –º–µ–Ω–µ–µ 90% –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n' +
                        '2. –ù–ï –º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ñ—Ä–∞–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n' +
                        '3. –ù–ï —Å–æ–∫—Ä–∞—â–∞–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ —É–±–∏—Ä–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n' +
                        '4. –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n' +
                        '5. –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è—Ç—å –∞–±–∑–∞—Ü—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n' +
                        '6. –ú–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n' +
                        '–¢–≤–æ—è —Ü–µ–ª—å - —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.',
                },
                {
                    role: 'user',
                    content: `–£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${text}`,
                },
            ],
        });

        return response.choices[0].message.content.trim();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏:', error);
        return text;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫ —Ç–µ–∫—Å—Ç—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
async function createTitle(text) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content:
                        '–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∏ –º—ã—Å–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n\n' +
                        '1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π/—Ç–µ–º –≤ —Ç–µ–∫—Å—Ç–µ:\n' +
                        '   - –ï—Å–ª–∏ 1 —Ç–µ–º–∞ ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (3-5 —Å–ª–æ–≤)\n' +
                        '   - –ï—Å–ª–∏ 2-3 —Ç–µ–º—ã ‚Üí —Å—Ä–µ–¥–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (6-10 —Å–ª–æ–≤)\n' +
                        '   - –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–µ–º ‚Üí –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (10-15 —Å–ª–æ–≤)\n\n' +
                        '2. –í–∫–ª—é—á–∞–π –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n' +
                        '3. –î–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É –∑–∞–º–µ—Ç–∫–∏\n' +
                        '4. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã\n' +
                        '5. –°–æ–∑–¥–∞–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ "—Ç—ç–≥" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –≤ –±—É–¥—É—â–µ–º\n\n' +
                        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
                        '- –û–¥–Ω–∞ —Ç–µ–º–∞: "–ò–¥–µ—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"\n' +
                        '- –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º: "–ü–ª–∞–Ω—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç, –≤—Å—Ç—Ä–µ—á–∞ —Å –ò–≤–∞–Ω–æ–º, –±—é–¥–∂–µ—Ç"\n' +
                        '- –ú–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π: "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: –∏—Ö —Ü–µ–Ω—ã, –Ω–∞—à USP, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è"',
                },
                {
                    role: 'user',
                    content: `–°–æ–∑–¥–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–π –ª–∏—á–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏: ${text}`,
                },
            ],
        });

        return response.choices[0].message.content.trim().replace(/"/g, '');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞:', error);
        return '–ó–∞–º–µ—Ç–∫–∞';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –∏–∑ Obsidian
async function getObsidianTags() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ç–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        const response = await axios.post(
            `${OBSIDIAN_URL}/search/`,
            {
                '!=': [{ var: 'tags' }, []],
            },
            {
                headers: {
                    Authorization: `Bearer ${OBSIDIAN_API_KEY}`,
                    'Content-Type': 'application/vnd.olrapi.jsonlogic+json',
                },
            }
        );

        const allTags = new Set();

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if (response.data && Array.isArray(response.data)) {
            for (const item of response.data) {
                if (item.filename && item.filename.endsWith('.md')) {
                    try {
                        const fileResponse = await axios.get(`${OBSIDIAN_URL}/vault/${encodeURIComponent(item.filename)}`, {
                            headers: {
                                Authorization: `Bearer ${OBSIDIAN_API_KEY}`,
                                Accept: 'application/vnd.olrapi.note+json',
                            },
                        });

                        if (fileResponse.data && fileResponse.data.tags) {
                            fileResponse.data.tags.forEach((tag) => {
                                if (tag && tag !== 'tg-transcript') {
                                    allTags.add(tag);
                                }
                            });
                        }
                    } catch (e) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
                    }
                }
            }
        }

        return Array.from(allTags).sort();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
        return [];
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function extractTagsFromVoice(voiceText, availableTags) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [
                {
                    role: 'system',
                    content: `–ò–∑–≤–ª–µ–∫–∏ —Ç–µ–≥–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ.
–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: ${availableTags.join(', ')}

–ü—Ä–∞–≤–∏–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:
1. –ò–∑–≤–ª–µ–∫–∏ –í–°–ï —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–≥–∏
2. –†–∞–∑–¥–µ–ª–∏ –∏—Ö –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã:
   - existing: —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –¢–û–ß–ù–û –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
   - new: –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "—Ç–µ–≥" –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–∞–º–∏ - –æ–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –≤ –æ–¥–∏–Ω —Ç–µ–≥ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
4. –°–ª–æ–≤–∞ "–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "—á–µ—Ä–µ–∑ —á–µ—Ä—Ç–æ—á–∫—É" - –æ–±—ä–µ–¥–∏–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
5. –ù–æ–≤—ã–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –≤ snake_case (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
6. –£–±–∏—Ä–∞–π –∏–∑ —Ç–µ–≥–æ–≤ —Å–∏–º–≤–æ–ª # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

–ü—Ä–∏–º–µ—Ä—ã:
- "–ª–∏—á–Ω–æ–µ" –∏ –µ—Å—Ç—å —Ç–µ–≥ "personal" ‚Üí existing: ["personal"], new: []
- "—Ç–µ–≥ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" ‚Üí new: ["–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ_—Ä–∞–∑–≤–∏—Ç–∏–µ"]
- "–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" ‚Üí new: ["–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ_—Ä–∞–∑–≤–∏—Ç–∏–µ"]
- "–Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç" ‚Üí new: ["–Ω–æ–≤—ã–π_–ø—Ä–æ–µ–∫—Ç"]

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{"existing": ["tag1", "tag2"], "new": ["new_tag1", "new_tag2"]}`,
                },
                {
                    role: 'user',
                    content: voiceText,
                },
            ],
            response_format: { type: 'json_object' },
        });

        const result = JSON.parse(response.choices[0].message.content);
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            existing: Array.isArray(result.existing) ? result.existing : [],
            new: Array.isArray(result.new) ? result.new : []
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
        return { existing: [], new: [] };
    }
}

async function showTagConfirmation(ctx, selectedTags, transcriptionData, voiceMessageId, availableTags) {
    const { existing, new: newTags } = selectedTags;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tagSelectionState
    const tagState = tagSelectionState.get(ctx.from.id);
    const tagSelectionMsgId = tagState ? tagState.tagSelectionMsgId : null;
    const botMessageId = tagState ? tagState.botMessageId : null; // –¥–æ–±–∞–≤–ª—è–µ–º
    
    let confirmMessage = '‚úÖ **–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏:**\n\n';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏
    confirmMessage += 'üìå **–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:**\n';
    if (existing.length > 0) {
        confirmMessage += existing.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
    } else {
        confirmMessage += '_–Ω–µ—Ç_';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
    confirmMessage += '\n\nüÜï **–ù–æ–≤—ã–µ —Ç–µ–≥–∏:**\n';
    if (newTags.length > 0) {
        confirmMessage += newTags.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
    } else {
        confirmMessage += '_–Ω–µ—Ç_';
    }
    
    confirmMessage += '\n\n‚ùì –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏?';
    confirmMessage += '\n\nüí¨ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤';

    const confirmMsg = await ctx.reply(confirmMessage, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[Markup.button.callback('‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å', `confirm_tags_${voiceMessageId}`)]]),
    });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const allTags = [...existing, ...newTags];
    
    tagConfirmationState.set(ctx.from.id, {
        selectedTags: allTags, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è createObsidianNote
        selectedTagsStructured: selectedTags, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        transcriptionData,
        voiceMessageId,
        confirmMsgId: confirmMsg.message_id,
        availableTags,
        tagSelectionMsgId: tagSelectionMsgId, // –¥–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞
        botMessageId: botMessageId // –¥–æ–±–∞–≤–ª—è–µ–º
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ–≥–æ–≤ –æ—Ç AI
async function getTagRecommendations(text, availableTags) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ç–µ–≥–∏.
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏: ${availableTags.join(', ')}

–í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ —Ç–µ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.

–°–¢–†–û–ì–û —Ä–∞–∑–¥–µ–ª–∏ —Ç–µ–≥–∏ –Ω–∞ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
1. existing - –¢–û–õ–¨–ö–û —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤
2. new - –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ!
{"existing": ["—Ç–µ–≥1", "—Ç–µ–≥2"], "new": ["–Ω–æ–≤—ã–π_—Ç–µ–≥1", "–Ω–æ–≤—ã–π_—Ç–µ–≥2"]}`,
                },
                {
                    role: 'user',
                    content: text,
                },
            ],
            response_format: { type: 'json_object' }, // –§–æ—Ä—Å–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç
        });

        const result = JSON.parse(response.choices[0].message.content);

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            existing: Array.isArray(result.existing) ? result.existing : [],
            new: Array.isArray(result.new) ? result.new : [],
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ–≥–æ–≤:', error);
        return { existing: [], new: [] };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline keyboard
function createTranscriptKeyboard(messageId) {
    return Markup.inlineKeyboard([
        [
            Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É', `add_note_${messageId}`),
            Markup.button.callback('üéôÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ', `keep_voice_${messageId}`),
        ],
    ]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian
async function createObsidianNote(data, selectedTags = []) {
    try {
        const date = new Date(data.timestamp);
        const filename = `${data.title}.md`;
        const filepath = `${OBSIDIAN_FOLDER}/${filename}`;

        const formattedDate = date.toISOString().slice(0, 16).replace('T', ' ');

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏
        const allTags = ['tg-transcript', ...selectedTags];

        const content = `---
title: "${data.title}"
date: ${formattedDate}
tags: [${allTags.join(', ')}]
source: telegram-voice
mode: ${data.mode}
---

${data.content}`;

        const response = await axios.put(`${OBSIDIAN_URL}/vault/${encodeURIComponent(filepath)}`, content, {
            headers: {
                Authorization: `Bearer ${OBSIDIAN_API_KEY}`,
                'Content-Type': 'text/markdown',
            },
        });

        return { success: true, filepath, tags: selectedTags };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
function splitLongText(text, maxLength = 3500) {
    const parts = [];
    let currentPart = '';
    const lines = text.split('\n');

    for (const line of lines) {
        if ((currentPart + line + '\n').length > maxLength) {
            if (currentPart) {
                parts.push(currentPart.trim());
                currentPart = '';
            }
            if (line.length > maxLength) {
                const words = line.split(' ');
                let currentLine = '';
                for (const word of words) {
                    if ((currentLine + word + ' ').length > maxLength) {
                        parts.push(currentLine.trim());
                        currentLine = word + ' ';
                    } else {
                        currentLine += word + ' ';
                    }
                }
                if (currentLine) {
                    currentPart = currentLine;
                }
            } else {
                currentPart = line + '\n';
            }
        } else {
            currentPart += line + '\n';
        }
    }

    if (currentPart) {
        parts.push(currentPart.trim());
    }

    return parts;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è processVoice
async function processVoice(ctx, fileId, voiceMessageId, withFormatting) {
    const mode = withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;

    const loadingMessage = await ctx.reply(`${mode.emoji} ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤ —Ä–µ–∂–∏–º–µ "${mode.name}"...`, {
        reply_to_message_id: voiceMessageId,
    });

    try {
        const link = await ctx.telegram.getFileLink(fileId);
        const res = await fetch(link.href);
        const buffer = await res.arrayBuffer();
        const tmpPath = `/tmp/${uuid()}.ogg`;
        await writeFile(tmpPath, Buffer.from(buffer));

        const rawTranscript = await openai.audio.transcriptions.create({
            model: 'whisper-1',
            file: createReadStream(tmpPath),
            response_format: 'text',
            language: 'ru',
        });

        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ:', deleteError.message);
        }

        let messageContent;
        let title = '';

        if (withFormatting) {
            const improvedTranscript = await improveReadability(rawTranscript);
            title = await createTitle(improvedTranscript);
            messageContent = improvedTranscript;
        } else {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–∂–µ –¥–ª—è –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            title = await createTitle(rawTranscript);
            messageContent = rawTranscript;
        }

        const fullMessage = `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n\n**–ó–∞–≥–æ–ª–æ–≤–æ–∫:**\n\`${title}\`\n\n**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\`\`\`\n${messageContent}\n\`\`\``;

        let botReply;

        if (fullMessage.length > 4000) {
            const filename = `transcript_${new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-')}.txt`;
            const fileContent = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}\n\n${messageContent}`;

            const tmpFilePath = `/tmp/${filename}`;
            await writeFile(tmpFilePath, fileContent, 'utf8');

            botReply = await ctx.replyWithDocument(
                { source: tmpFilePath, filename: filename },
                {
                    caption:
                        `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n\n` +
                        `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\`\n\n` +
                        `üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.`,
                    parse_mode: 'Markdown',
                    reply_to_message_id: voiceMessageId,
                    ...createTranscriptKeyboard(voiceMessageId),
                }
            );

            try {
                const fs = await import('fs/promises');
                await fs.unlink(tmpFilePath);
            } catch (err) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', err.message);
            }
        } else {
            botReply = await ctx.reply(fullMessage, {
                parse_mode: 'Markdown',
                reply_to_message_id: voiceMessageId,
                ...createTranscriptKeyboard(voiceMessageId),
            });
        }

        const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
            content: messageContent,
            timestamp: new Date(),
            userId: ctx.from.id,
            mode: mode.name,
        });

        botMessageToVoice.set(botReply.message_id, { voiceMessageId, fileId });

        setTimeout(() => {
            transcriptionCache.delete(cacheId);
        }, 30 * 60 * 1000);

        return botReply;
    } catch (error) {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ:', deleteError.message);
        }
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É"
bot.action(/add_note_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
    const transcriptionData = transcriptionCache.get(cacheId);

    if (!transcriptionData) {
        await ctx.answerCbQuery('‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    if (!OBSIDIAN_API_KEY) {
        await ctx.answerCbQuery('‚ùå API –∫–ª—é—á Obsidian –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        await ctx.editMessageReplyMarkup();
        await ctx.reply('‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Obsidian –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env:\nOBSIDIAN_API_KEY=–≤–∞—à_–∫–ª—é—á');
        return;
    }

    await ctx.answerCbQuery('üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–≥–∏...');

    try {
        const availableTags = await getObsidianTags();

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
        const recommendations = await getTagRecommendations(transcriptionData.content, availableTags);

        let tagsMessage = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:**\n';
        if (availableTags.length > 0) {
            tagsMessage += availableTags.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
        } else {
            tagsMessage += '_–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        tagsMessage += '\n\nü§ñ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ–≥–∏:**';
        if (recommendations.existing.length > 0) {
            tagsMessage += `\n–ò–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${recommendations.existing.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }
        if (recommendations.new.length > 0) {
            tagsMessage += `\n–ù–æ–≤—ã–µ: ${recommendations.new.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }

        tagsMessage += '\n\nüí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ì–° –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏';

        const tagSelectionMsg = await ctx.reply(tagsMessage, {
            parse_mode: 'Markdown',
        });

        tagSelectionState.set(ctx.from.id, {
            voiceMessageId,
            transcriptionData,
            tagSelectionMsgId: tagSelectionMsg.message_id,
            availableTags,
            botMessageId: ctx.callbackQuery.message.message_id // –¥–æ–±–∞–≤–ª—è–µ–º
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–≥–æ–≤:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏. –î–æ–±–∞–≤–ª—è—é –∑–∞–º–µ—Ç–∫—É –±–µ–∑ —Ç–µ–≥–æ–≤...');

        const result = await createObsidianNote(transcriptionData);
        if (result.success) {
            await ctx.editMessageReplyMarkup();
            await ctx.reply(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Obsidian!\nüìù ${transcriptionData.title}`, {
                parse_mode: 'Markdown',
            });
            transcriptionCache.delete(cacheId);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤
bot.on('voice', async (ctx) => {
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    if (tagConfirmationState.has(userId)) {
        const confirmState = tagConfirmationState.get(userId);

        try {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.confirmMsgId);
            } catch (e) {}

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
            const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id);
            const res = await fetch(link.href);
            const buffer = await res.arrayBuffer();
            const tmpPath = `/tmp/${uuid()}.ogg`;
            await writeFile(tmpPath, Buffer.from(buffer));

            const tagVoiceText = await openai.audio.transcriptions.create({
                model: 'whisper-1',
                file: createReadStream(tmpPath),
                response_format: 'text',
                language: 'ru',
            });

            const selectedTags = await extractTagsFromVoice(tagVoiceText, confirmState.availableTags);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, confirmState.transcriptionData, confirmState.voiceMessageId, confirmState.availableTags);

            // –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
        }
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤
    if (tagSelectionState.has(userId)) {
        const state = tagSelectionState.get(userId);

        try {
            const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id);
            const res = await fetch(link.href);
            const buffer = await res.arrayBuffer();
            const tmpPath = `/tmp/${uuid()}.ogg`;
            await writeFile(tmpPath, Buffer.from(buffer));

            const tagVoiceText = await openai.audio.transcriptions.create({
                model: 'whisper-1',
                file: createReadStream(tmpPath),
                response_format: 'text',
                language: 'ru',
            });

            const selectedTags = await extractTagsFromVoice(tagVoiceText, state.availableTags);

            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, state.transcriptionData, state.voiceMessageId, state.availableTags);

            tagSelectionState.delete(userId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
            tagSelectionState.delete(userId);
        }

        return;
    }

    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    try {
        const user = ctx.message.from;
        const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
        console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);

        const withFormatting = userPreferences.get(userId) === true;
        const fileId = ctx.message.voice.file_id;

        const botReply = await processVoice(ctx, fileId, ctx.message.message_id, withFormatting);

        const mode = getUserMode(userId);
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
    } catch (err) {
        console.error(err);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (ctx.message.text.startsWith('/')) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    if (tagConfirmationState.has(userId)) {
        const confirmState = tagConfirmationState.get(userId);

        try {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.confirmMsgId);
            } catch (e) {}

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            const selectedTags = await extractTagsFromVoice(ctx.message.text, confirmState.availableTags);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, confirmState.transcriptionData, confirmState.voiceMessageId, confirmState.availableTags);

            // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
        }
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤
    if (tagSelectionState.has(userId)) {
        const state = tagSelectionState.get(userId);

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            const selectedTags = await extractTagsFromVoice(ctx.message.text, state.availableTags);

            // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, state.transcriptionData, state.voiceMessageId, state.availableTags);

            tagSelectionState.delete(userId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
            tagSelectionState.delete(userId);
        }

        return;
    }
    
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏)
    try {
        const messageText = ctx.message.text;
        const messageId = ctx.message.message_id;
        
        const title = await createTitle(messageText);
        const responseText = `üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\``;
        
        const botReply = await ctx.reply(responseText, {
            parse_mode: 'Markdown',
            reply_to_message_id: messageId,
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É', `add_note_text_${messageId}`)]
            ])
        });
        
        const cacheId = `${ctx.chat.id}_text_${messageId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
            content: messageText,
            timestamp: new Date(),
            userId: ctx.from.id,
            mode: '–¢–µ–∫—Å—Ç',
            isText: true
        });
        
        setTimeout(() => {
            transcriptionCache.delete(cacheId);
        }, 30 * 60 * 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É" –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.action(/add_note_(text_)?(.+)/, async (ctx) => {
    const isText = ctx.match[1] === 'text_';
    const messageId = ctx.match[2];
    const cacheId = `${ctx.chat.id}_${isText ? 'text_' : ''}${messageId}`;
    const transcriptionData = transcriptionCache.get(cacheId);

    if (!transcriptionData) {
        await ctx.answerCbQuery('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    if (!OBSIDIAN_API_KEY) {
        await ctx.answerCbQuery('‚ùå API –∫–ª—é—á Obsidian –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        await ctx.editMessageReplyMarkup();
        await ctx.reply('‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Obsidian –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env:\nOBSIDIAN_API_KEY=–≤–∞—à_–∫–ª—é—á');
        return;
    }

    await ctx.answerCbQuery('üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–≥–∏...');

    try {
        const availableTags = await getObsidianTags();

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
        const recommendations = await getTagRecommendations(transcriptionData.content, availableTags);

        let tagsMessage = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:**\n';
        if (availableTags.length > 0) {
            tagsMessage += availableTags.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
        } else {
            tagsMessage += '_–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        tagsMessage += '\n\nü§ñ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ–≥–∏:**';
        if (recommendations.existing.length > 0) {
            tagsMessage += `\n–ò–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${recommendations.existing.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }
        if (recommendations.new.length > 0) {
            tagsMessage += `\n–ù–æ–≤—ã–µ: ${recommendations.new.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }

        tagsMessage += '\n\nüí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ì–° –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏';

        const tagSelectionMsg = await ctx.reply(tagsMessage, {
            parse_mode: 'Markdown',
        });

        tagSelectionState.set(ctx.from.id, {
            voiceMessageId: messageId,
            transcriptionData,
            tagSelectionMsgId: tagSelectionMsg.message_id,
            availableTags,
            isText: isText, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥
            botMessageId: ctx.callbackQuery.message.message_id // –¥–æ–±–∞–≤–ª—è–µ–º
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–≥–æ–≤:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏. –î–æ–±–∞–≤–ª—è—é –∑–∞–º–µ—Ç–∫—É –±–µ–∑ —Ç–µ–≥–æ–≤...');
 
        const result = await createObsidianNote(transcriptionData);
        if (result.success) {
            await ctx.editMessageReplyMarkup();
            await ctx.reply(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Obsidian!\nüìù ${transcriptionData.title}`, {
                parse_mode: 'Markdown',
            });
            transcriptionCache.delete(cacheId);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ"
bot.action(/keep_voice_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const cacheId = `${ctx.chat.id}_${voiceMessageId}`;

    await ctx.editMessageReplyMarkup();
    await ctx.answerCbQuery('üëå –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');

    transcriptionCache.delete(cacheId);
});

bot.action(/confirm_tags_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const userId = ctx.from.id;
    const confirmState = tagConfirmationState.get(userId);

    if (!confirmState || confirmState.voiceMessageId !== voiceMessageId) {
        await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
        return;
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É
        const result = await createObsidianNote(confirmState.transcriptionData, confirmState.selectedTags);

        if (result.success) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.confirmMsgId);
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–≥–æ–≤
            if (confirmState.tagSelectionMsgId) {
                try {
                    await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.tagSelectionMsgId);
                } catch (e) {}
            }
            
            // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if (confirmState.botMessageId) {
                try {
                    await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.botMessageId);
                } catch (e) {}
            }

            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
            const botMsg = Array.from(botMessageToVoice.entries()).find(([msgId, data]) => data.voiceMessageId === voiceMessageId);
            if (botMsg) {
                await ctx.telegram.editMessageReplyMarkup(ctx.chat.id, botMsg[0]);
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            const structuredTags = confirmState.selectedTagsStructured || { existing: confirmState.selectedTags, new: [] };
            let tagsStr = '';

            if (structuredTags.existing.length > 0 || structuredTags.new.length > 0) {
                tagsStr = '\n';
                if (structuredTags.existing.length > 0) {
                    tagsStr += `\nüìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: ${structuredTags.existing.map((t) => `#${t.replace(/_/g, '\\_')}`).join(', ')}`;
                }
                if (structuredTags.new.length > 0) {
                    tagsStr += `\nüÜï –ù–æ–≤—ã–µ: ${structuredTags.new.map((t) => `#${t.replace(/_/g, '\\_')}`).join(', ')}`;
                }
            } else if (confirmState.selectedTags.length > 0) {
                // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                tagsStr = `\nüè∑Ô∏è –¢–µ–≥–∏: ${confirmState.selectedTags.map((t) => `#${t.replace(/_/g, '\\_')}`).join(', ')}`;
            }

            await ctx.answerCbQuery('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
            await ctx.reply(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Obsidian!${tagsStr}\nüìù ${confirmState.transcriptionData.title}`, {
                parse_mode: 'Markdown',
            });

            transcriptionCache.delete(cacheId);
            tagConfirmationState.delete(userId);
        } else {
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(
        `ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!*\n\n` +
            `${mode.emoji} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *${mode.name}*\n\n` +
            `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `/format - —Ä–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ${MODES.WITH_FORMAT.emoji}\n` +
            `/noformat - —Ä–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${MODES.WITHOUT_FORMAT.emoji}\n` +
            `/toggle - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞\n` +
            `/mode - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n` +
            `/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n` +
            `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏! üéôÔ∏è`,
        { parse_mode: 'Markdown' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.command('format', async (ctx) => {
    const userId = ctx.from.id;

    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                userPreferences.set(userId, true);
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);
                botMessageToVoice.delete(botMessage.message_id);
                await processVoice(ctx, voiceData.fileId, voiceData.voiceMessageId, true);
                return;
            } catch (error) {
                console.error('Error processing format command:', error);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                return;
            }
        }
    }

    userPreferences.set(userId, true);
    ctx.reply(
        `${MODES.WITH_FORMAT.emoji} *–†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: ${MODES.WITH_FORMAT.name}*\n\n–í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.`,
        {
            parse_mode: 'Markdown',
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.command('noformat', async (ctx) => {
    const userId = ctx.from.id;

    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                userPreferences.set(userId, false);
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);
                botMessageToVoice.delete(botMessage.message_id);
                await processVoice(ctx, voiceData.fileId, voiceData.voiceMessageId, false);
                return;
            } catch (error) {
                console.error('Error processing noformat command:', error);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                return;
            }
        }
    }

    userPreferences.set(userId, false);
    ctx.reply(
        `${MODES.WITHOUT_FORMAT.emoji} *–†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: ${MODES.WITHOUT_FORMAT.name}*\n\n–í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        {
            parse_mode: 'Markdown',
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
bot.command('toggle', (ctx) => {
    const userId = ctx.from.id;
    const currentMode = userPreferences.get(userId) === true;
    userPreferences.set(userId, !currentMode);

    const newMode = getUserMode(userId);
    ctx.reply(`${newMode.emoji} *–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${newMode.name}*\n\n${newMode.description}`, {
        parse_mode: 'Markdown',
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
bot.command('mode', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(`${mode.emoji} *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${mode.name}*\n\n${mode.description}`, {
        parse_mode: 'Markdown',
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
async function handleDelete(ctx) {
    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, voiceData.voiceMessageId);
                botMessageToVoice.delete(botMessage.message_id);
                return;
            } catch (error) {
                console.error('Error processing delete command:', error);
                return;
            }
        }
    }

    try {
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
    } catch (error) {
        console.error('Error deleting command message:', error);
    }
}

bot.command('d', handleDelete);
bot.command('del', handleDelete);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
bot.command(['del_start', 'delstart', 'ds'], async (ctx) => {
    const userId = ctx.from.id;

    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = ctx.message.reply_to_message.message_id;
    deleteRangeStart.set(userId, startMessageId);

    const confirmMessage = await ctx.reply('‚úÖ –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /del_end –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
        reply_to_message_id: ctx.message.message_id,
    });

    try {
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, confirmMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', error);
        }
    }, 5000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è
bot.command(['del_end', 'delend', 'de'], async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∫–æ–Ω—Ü–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = deleteRangeStart.get(userId);
    if (!startMessageId) {
        await ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /del_start', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const endMessageId = ctx.message.reply_to_message.message_id;
    const fromId = Math.min(startMessageId, endMessageId);
    const toId = Math.max(startMessageId, endMessageId);

    const progressMessage = await ctx.reply(`üóëÔ∏è –£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID ${fromId} –ø–æ ${toId}...`);

    let deletedCount = 0;
    let failedCount = 0;

    for (let messageId = fromId; messageId <= toId; messageId++) {
        try {
            await ctx.telegram.deleteMessage(chatId, messageId);
            deletedCount++;

            if (deletedCount % 10 === 0) {
                await new Promise((resolve) => setTimeout(resolve, 100));
            }
        } catch (error) {
            failedCount++;
        }
    }

    try {
        await ctx.telegram.deleteMessage(chatId, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    deleteRangeStart.delete(userId);

    try {
        await ctx.telegram.editMessageText(
            chatId,
            progressMessage.message_id,
            null,
            `‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error);
    }

    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(chatId, progressMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', error);
        }
    }, 5000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
bot.command(['del_all', 'delall', 'da'], async (ctx) => {
    const chatId = ctx.chat.id;

    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = ctx.message.reply_to_message.message_id;
    const currentMessageId = ctx.message.message_id;

    const progressMessage = await ctx.reply(`üóëÔ∏è –£–¥–∞–ª—è—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å ID ${startMessageId} (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)...`);

    let deletedCount = 0;
    let failedCount = 0;
    let consecutiveFailures = 0;

    const maxMessageId = currentMessageId + 1000;

    for (let messageId = startMessageId; messageId <= maxMessageId; messageId++) {
        try {
            await ctx.telegram.deleteMessage(chatId, messageId);
            deletedCount++;
            consecutiveFailures = 0;

            if (deletedCount % 10 === 0) {
                await new Promise((resolve) => setTimeout(resolve, 100));
            }
        } catch (error) {
            failedCount++;
            consecutiveFailures++;

            if (consecutiveFailures >= 50) {
                console.log(`–ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${consecutiveFailures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥`);
                break;
            }
        }
    }

    try {
        await ctx.telegram.deleteMessage(chatId, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    try {
        await ctx.telegram.editMessageText(
            chatId,
            progressMessage.message_id,
            null,
            `‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\nüìç –ù–∞—á–∏–Ω–∞—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${startMessageId}`
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error);
    }

    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(chatId, progressMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', error);
        }
    }, 7000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
bot.command(['del_cancel', 'delcancel', 'dc'], async (ctx) => {
    const userId = ctx.from.id;

    if (deleteRangeStart.has(userId)) {
        deleteRangeStart.delete(userId);
        const msg = await ctx.reply('‚ùå –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.');

        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
        }

        setTimeout(async () => {
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, msg.message_id);
            } catch (error) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', error);
            }
        }, 3000);
    } else {
        await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
bot.command('help', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(
        `ü§ñ *–ë–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n` +
            `${mode.emoji} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *${mode.name}*\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ.\n\n` +
            `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `${MODES.WITH_FORMAT.emoji} \`/format\` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫)\n` +
            `${MODES.WITHOUT_FORMAT.emoji} \`/noformat\` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)\n` +
            `üîÑ \`/toggle\` - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏\n` +
            `‚ÑπÔ∏è \`/mode\` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n` +
            `üóëÔ∏è \`/d\` –∏–ª–∏ \`/del\` - —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É\n` +
            `üìç \`/del_start\` - –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n` +
            `üìç \`/del_end\` - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω–µ—Ü –∏ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
            `üßπ \`/del_all\` - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ\n` +
            `‚ùå \`/del_cancel\` - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n` +
            `üÜò \`/help\` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
            `üè† \`/start\` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n\n` +
            `üí° *–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:*\n` +
            `${MODES.WITH_FORMAT.emoji} **–° —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:** –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n` +
            `${MODES.WITHOUT_FORMAT.emoji} **–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞\n\n` +
            `üìù *Obsidian –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:*\n` +
            `–ü–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian.\n` +
            `–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n` +
            `üí¨ *–°–æ–≤–µ—Ç:* –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /format –∏–ª–∏ /noformat, —á—Ç–æ–±—ã –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ!\n\n` +
            `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:*\n` +
            `‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: /del_start –Ω–∞ –ø–µ—Ä–≤–æ–µ ‚Üí /del_end –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n` +
            `‚Ä¢ –í—Å–µ –ø–æ—Å–ª–µ: /del_all –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí —É–¥–∞–ª–∏—Ç –≤—Å–µ –ø–æ—Å–ª–µ –Ω–µ–≥–æ\n\n` +
            `üìù –¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`,
        { parse_mode: 'Markdown' }
    );
});

bot.launch();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
bot.telegram.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: 'format', description: '–†–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º üé®' },
    { command: 'noformat', description: '–†–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üìù' },
    { command: 'toggle', description: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º' },
    { command: 'mode', description: '–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º' },
    { command: 'd', description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üóëÔ∏è' },
    { command: 'del', description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üóëÔ∏è' },
    { command: 'del_start', description: '–ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è üìç' },
    { command: 'del_end', description: '–ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ üìç' },
    { command: 'del_all', description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è üßπ' },
    { command: 'del_cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚ùå' },
    { command: 'help', description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
]);

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
