/*
 * –í–ê–ñ–ù–û: –ü–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫—Ä–∏—Ç–∏—á–µ–Ω!
 * 1. –°–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—ã (bot.command) 
 * 2. –ó–∞—Ç–µ–º actions (bot.action)
 * 3. –í –∫–æ–Ω—Ü–µ –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (bot.on)
 * –°–º. DEVELOPMENT_RULES.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
 */

import { Telegraf, Markup } from 'telegraf';
import { writeFile, unlink } from 'fs/promises';
import { createReadStream } from 'fs';
import fetch from 'node-fetch';
import { OpenAI } from 'openai';
import { v4 as uuid } from 'uuid';
import dotenv from 'dotenv';
import axios from 'axios';
import ffmpeg from 'fluent-ffmpeg';
import { promisify } from 'util';
import { exec } from 'child_process';
const execPromise = promisify(exec);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;
const TIME_DELAY = 400_000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Obsidian API
const OBSIDIAN_API_KEY = process.env.OBSIDIAN_API_KEY || '';
const OBSIDIAN_HOST = process.env.OBSIDIAN_HOST || '127.0.0.1';
const OBSIDIAN_PORT = process.env.OBSIDIAN_PORT || '27123';
const OBSIDIAN_URL = `http://${OBSIDIAN_HOST}:${OBSIDIAN_PORT}`;
const OBSIDIAN_FOLDER = process.env.OBSIDIAN_FOLDER || 'Telegram Voice Notes';

const bot = new Telegraf(TELEGRAM_TOKEN);
const openai = new OpenAI({
    apiKey: OPENAI_KEY,
    timeout: TIME_DELAY,
});

// –•—Ä–∞–Ω–∏–ª–∏—â–∞
const userPreferences = new Map();
const botMessageToVoice = new Map();
const deleteRangeStart = new Map();
const transcriptionCache = new Map();
const tagSelectionState = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤
const tagConfirmationState = new Map(); // –î–æ–±–∞–≤—å—Ç–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const collectSessionState = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const completedSessionsMap = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
const messageHistory = new Map(); // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const pendingMessages = new Map(); // –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ reply –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
const processedCallbacks = new Set(); // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback queries

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ–∂–∏–º–∞
const MODES = {
    WITH_FORMAT: {
        emoji: 'üé®',
        name: '–° —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
        description: '—É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫',
    },
    WITHOUT_FORMAT: {
        emoji: 'üìù',
        name: '–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: '—Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞',
    },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserMode(userId) {
    const withFormatting = userPreferences.get(userId) === true;
    return withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ
async function handleReplyAndStartCollection(ctx, userId, replyToMsg) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    const session = new CollectSession(userId, ctx.chat.id);
    collectSessionState.set(userId, session);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É)
    if (replyToMsg.from?.is_bot) {
        // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const voiceData = botMessageToVoice.get(replyToMsg.message_id);
        if (voiceData) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            const cacheId = `${ctx.chat.id}_${voiceData.voiceMessageId}`;
            const cachedData = transcriptionCache.get(cacheId);
            if (cachedData && cachedData.rawTranscript) {
                session.addMessage('voice', cachedData.rawTranscript, voiceData.voiceMessageId, voiceData.fileId);
            } else {
                session.addMessage('voice', null, voiceData.voiceMessageId, voiceData.fileId);
            }
            session.trackMessage(voiceData.voiceMessageId, 'user_content');
            session.trackMessage(replyToMsg.message_id, 'bot_response');
        }
    } else {
        // –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const originalMsg = replyToMsg;
        const originalMsgId = originalMsg.message_id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const pendingKey = `${ctx.chat.id}_${originalMsgId}`;
        const pendingData = pendingMessages.get(pendingKey);
        if (pendingData) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º placeholder
            session.addMessage('pending', '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...', originalMsgId, pendingData.fileId);
            session.trackMessage(originalMsgId, 'user_content');
            pendingData.collectSession = session; // –°–≤—è–∑—ã–≤–∞–µ–º —Å —Å–µ—Å—Å–∏–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            if (originalMsg.voice) {
                session.addMessage('voice', null, originalMsg.message_id, originalMsg.voice.file_id);
                session.trackMessage(originalMsg.message_id, 'user_content');
            } else if (originalMsg.text) {
                session.addMessage('text', originalMsg.text, originalMsg.message_id);
                session.trackMessage(originalMsg.message_id, 'user_content');
            } else if (originalMsg.video) {
                session.addMessage('video', null, originalMsg.message_id, originalMsg.video.file_id);
                session.trackMessage(originalMsg.message_id, 'user_content');
            } else if (originalMsg.document) {
                const fileName = originalMsg.document.file_name || 'file';
                const fileExt = fileName.toLowerCase().split('.').pop();
                if (fileExt === 'mp4') {
                    session.addMessage('document', null, originalMsg.message_id, originalMsg.document.file_id);
                    session.trackMessage(originalMsg.message_id, 'user_content');
                }
            }
        }
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const notification = await ctx.reply(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`);
    session.trackMessage(notification.message_id, 'bot_notification');
    
    return session;
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
class CollectSession {
    constructor(userId, chatId) {
        this.userId = userId;
        this.chatId = chatId;
        this.messages = [];
        this.textCount = 0;
        this.voiceCount = 0;
        this.photoCount = 0;
        this.videoCount = 0;
        this.documentCount = 0;
        this.startTime = new Date();
        this.statusMessageId = null;
        this.timeoutTimer = null;
        // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
        this.allMessageIds = [];
    }

    addMessage(type, content, messageId, fileId = null) {
        this.messages.push({
            type,
            content,
            messageId,
            fileId,
            timestamp: new Date()
        });

        switch(type) {
            case 'text':
                this.textCount++;
                break;
            case 'voice':
                this.voiceCount++;
                break;
            case 'photo':
                this.photoCount++;
                break;
            case 'video':
                this.videoCount++;
                break;
            case 'document':
                this.documentCount++;
                break;
        }

        this.resetTimeout();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
    trackMessage(messageId, messageType) {
        this.allMessageIds.push({
            id: messageId,
            type: messageType, // 'user_command', 'bot_status', 'user_content', 'bot_response', 'final_result'
            timestamp: new Date()
        });
        console.log(`üìå –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ: ID=${messageId}, —Ç–∏–ø=${messageType}, –≤—Å–µ–≥–æ=${this.allMessageIds.length}`);
    }

    getTotalCount() {
        return this.messages.length;
    }

    getStatusText() {
        const parts = [];
        if (this.textCount > 0) parts.push(`${this.textCount} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö`);
        if (this.voiceCount > 0) parts.push(`${this.voiceCount} –≥–æ–ª–æ—Å–æ–≤—ã—Ö`);
        if (this.photoCount > 0) parts.push(`${this.photoCount} —Ñ–æ—Ç–æ`);
        if (this.videoCount > 0) parts.push(`${this.videoCount} –≤–∏–¥–µ–æ`);
        if (this.documentCount > 0) parts.push(`${this.documentCount} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        
        if (parts.length === 0) return '–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
        return parts.join(', ');
    }

    resetTimeout() {
        if (this.timeoutTimer) {
            clearTimeout(this.timeoutTimer);
        }
    }

    clear() {
        this.messages = [];
        this.textCount = 0;
        this.voiceCount = 0;
        this.photoCount = 0;
        this.videoCount = 0;
        this.documentCount = 0;
        this.allMessageIds = [];
        this.resetTimeout();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
async function improveReadability(text) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content:
                        '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è, –ù–û —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:\n' +
                        '1. –°–æ—Ö—Ä–∞–Ω–∏ –Ω–µ –º–µ–Ω–µ–µ 90% –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n' +
                        '2. –ù–ï –º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ñ—Ä–∞–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n' +
                        '3. –ù–ï —Å–æ–∫—Ä–∞—â–∞–π —Ç–µ–∫—Å—Ç –∏ –Ω–µ —É–±–∏—Ä–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n' +
                        '4. –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n' +
                        '5. –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è—Ç—å –∞–±–∑–∞—Ü—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏\n' +
                        '6. –ú–æ–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n' +
                        '–¢–≤–æ—è —Ü–µ–ª—å - —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.',
                },
                {
                    role: 'user',
                    content: `–£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${text}`,
                },
            ],
        });

        return response.choices[0].message.content.trim();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏:', error);
        return text;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫ —Ç–µ–∫—Å—Ç—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
async function createTitle(text) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content:
                        '–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∏ –º—ã—Å–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n\n' +
                        '1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π/—Ç–µ–º –≤ —Ç–µ–∫—Å—Ç–µ:\n' +
                        '   - –ï—Å–ª–∏ 1 —Ç–µ–º–∞ ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (3-5 —Å–ª–æ–≤)\n' +
                        '   - –ï—Å–ª–∏ 2-3 —Ç–µ–º—ã ‚Üí —Å—Ä–µ–¥–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (6-10 —Å–ª–æ–≤)\n' +
                        '   - –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–µ–º ‚Üí –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (10-15 —Å–ª–æ–≤)\n\n' +
                        '2. –í–∫–ª—é—á–∞–π –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n' +
                        '3. –î–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É –∑–∞–º–µ—Ç–∫–∏\n' +
                        '4. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã\n' +
                        '5. –°–æ–∑–¥–∞–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ "—Ç—ç–≥" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –≤ –±—É–¥—É—â–µ–º\n\n' +
                        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
                        '- –û–¥–Ω–∞ —Ç–µ–º–∞: "–ò–¥–µ—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é"\n' +
                        '- –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º: "–ü–ª–∞–Ω—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç, –≤—Å—Ç—Ä–µ—á–∞ —Å –ò–≤–∞–Ω–æ–º, –±—é–¥–∂–µ—Ç"\n' +
                        '- –ú–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π: "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: –∏—Ö —Ü–µ–Ω—ã, –Ω–∞—à USP, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è"',
                },
                {
                    role: 'user',
                    content: `–°–æ–∑–¥–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–π –ª–∏—á–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏: ${text}`,
                },
            ],
        });

        return response.choices[0].message.content.trim().replace(/"/g, '');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞:', error);
        return '–ó–∞–º–µ—Ç–∫–∞';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –∏–∑ Obsidian
async function getObsidianTags() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ç–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        const response = await axios.post(
            `${OBSIDIAN_URL}/search/`,
            {
                '!=': [{ var: 'tags' }, []],
            },
            {
                headers: {
                    Authorization: `Bearer ${OBSIDIAN_API_KEY}`,
                    'Content-Type': 'application/vnd.olrapi.jsonlogic+json',
                },
            }
        );

        const allTags = new Set();

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if (response.data && Array.isArray(response.data)) {
            for (const item of response.data) {
                if (item.filename && item.filename.endsWith('.md')) {
                    try {
                        const fileResponse = await axios.get(`${OBSIDIAN_URL}/vault/${encodeURIComponent(item.filename)}`, {
                            headers: {
                                Authorization: `Bearer ${OBSIDIAN_API_KEY}`,
                                Accept: 'application/vnd.olrapi.note+json',
                            },
                        });

                        if (fileResponse.data && fileResponse.data.tags) {
                            fileResponse.data.tags.forEach((tag) => {
                                if (tag && tag !== 'tg-transcript') {
                                    allTags.add(tag);
                                }
                            });
                        }
                    } catch (e) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
                    }
                }
            }
        }

        return Array.from(allTags).sort();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
        return [];
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function extractTagsFromVoice(voiceText, availableTags) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [
                {
                    role: 'system',
                    content: `–ò–∑–≤–ª–µ–∫–∏ —Ç–µ–≥–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ.
–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: ${availableTags.join(', ')}

–ü—Ä–∞–≤–∏–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:
1. –ò–∑–≤–ª–µ–∫–∏ –í–°–ï —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–≥–∏
2. –†–∞–∑–¥–µ–ª–∏ –∏—Ö –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã:
   - existing: —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –¢–û–ß–ù–û –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
   - new: –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "—Ç–µ–≥" –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–∞–º–∏ - –æ–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –≤ –æ–¥–∏–Ω —Ç–µ–≥ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
4. –°–ª–æ–≤–∞ "–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "—á–µ—Ä–µ–∑ —á–µ—Ä—Ç–æ—á–∫—É" - –æ–±—ä–µ–¥–∏–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
5. –ù–æ–≤—ã–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –≤ snake_case (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
6. –£–±–∏—Ä–∞–π –∏–∑ —Ç–µ–≥–æ–≤ —Å–∏–º–≤–æ–ª # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

–ü—Ä–∏–º–µ—Ä—ã:
- "–ª–∏—á–Ω–æ–µ" –∏ –µ—Å—Ç—å —Ç–µ–≥ "personal" ‚Üí existing: ["personal"], new: []
- "—Ç–µ–≥ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" ‚Üí new: ["–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ_—Ä–∞–∑–≤–∏—Ç–∏–µ"]
- "–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" ‚Üí new: ["–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ_—Ä–∞–∑–≤–∏—Ç–∏–µ"]
- "–Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç" ‚Üí new: ["–Ω–æ–≤—ã–π_–ø—Ä–æ–µ–∫—Ç"]

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{"existing": ["tag1", "tag2"], "new": ["new_tag1", "new_tag2"]}`,
                },
                {
                    role: 'user',
                    content: voiceText,
                },
            ],
            response_format: { type: 'json_object' },
        });

        const result = JSON.parse(response.choices[0].message.content);
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            existing: Array.isArray(result.existing) ? result.existing : [],
            new: Array.isArray(result.new) ? result.new : []
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
        return { existing: [], new: [] };
    }
}

async function showTagConfirmation(ctx, selectedTags, transcriptionData, voiceMessageId, availableTags) {
    const { existing, new: newTags } = selectedTags;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tagSelectionState
    const tagState = tagSelectionState.get(ctx.from.id);
    const tagSelectionMsgId = tagState ? tagState.tagSelectionMsgId : null;
    const botMessageId = tagState ? tagState.botMessageId : null; // –¥–æ–±–∞–≤–ª—è–µ–º
    
    let confirmMessage = '‚úÖ **–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏:**\n\n';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏
    confirmMessage += 'üìå **–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏:**\n';
    if (existing.length > 0) {
        confirmMessage += existing.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
    } else {
        confirmMessage += '_–Ω–µ—Ç_';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
    confirmMessage += '\n\nüÜï **–ù–æ–≤—ã–µ —Ç–µ–≥–∏:**\n';
    if (newTags.length > 0) {
        confirmMessage += newTags.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
    } else {
        confirmMessage += '_–Ω–µ—Ç_';
    }
    
    confirmMessage += '\n\n‚ùì –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É —Å —ç—Ç–∏–º–∏ —Ç–µ–≥–∞–º–∏?';
    confirmMessage += '\n\nüí¨ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤';

    const confirmMsg = await ctx.reply(confirmMessage, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([[Markup.button.callback('‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å', `confirm_tags_${voiceMessageId}`)]]),
    });

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const allTags = [...existing, ...newTags];
    
    tagConfirmationState.set(ctx.from.id, {
        selectedTags: allTags, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è createObsidianNote
        selectedTagsStructured: selectedTags, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        transcriptionData,
        voiceMessageId,
        confirmMsgId: confirmMsg.message_id,
        availableTags,
        tagSelectionMsgId: tagSelectionMsgId, // –¥–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞
        botMessageId: botMessageId // –¥–æ–±–∞–≤–ª—è–µ–º
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ–≥–æ–≤ –æ—Ç AI
async function getTagRecommendations(text, availableTags) {
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ç–µ–≥–∏.
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏: ${availableTags.join(', ')}

–í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ —Ç–µ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.

–°–¢–†–û–ì–û —Ä–∞–∑–¥–µ–ª–∏ —Ç–µ–≥–∏ –Ω–∞ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
1. existing - –¢–û–õ–¨–ö–û —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤
2. new - –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ!
{"existing": ["—Ç–µ–≥1", "—Ç–µ–≥2"], "new": ["–Ω–æ–≤—ã–π_—Ç–µ–≥1", "–Ω–æ–≤—ã–π_—Ç–µ–≥2"]}`,
                },
                {
                    role: 'user',
                    content: text,
                },
            ],
            response_format: { type: 'json_object' }, // –§–æ—Ä—Å–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç
        });

        const result = JSON.parse(response.choices[0].message.content);

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            existing: Array.isArray(result.existing) ? result.existing : [],
            new: Array.isArray(result.new) ? result.new : [],
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ–≥–æ–≤:', error);
        return { existing: [], new: [] };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline keyboard
function createTranscriptKeyboard(messageId, isCollect = false) {
    if (isCollect) {
        // –î–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ Obsidian', `add_note_combined_${messageId}`),
                Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë', `delete_collect_${messageId}`)
            ]
        ]);
    } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É', `add_note_${messageId}`),
                Markup.button.callback('üóëÔ∏è', `delete_msg_${messageId}`)
            ]
        ]);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian
async function createObsidianNote(data, selectedTags = []) {
    try {
        const date = new Date(data.timestamp);
        const filename = `${data.title}.md`;
        const filepath = `${OBSIDIAN_FOLDER}/${filename}`;

        const formattedDate = date.toISOString().slice(0, 16).replace('T', ' ');

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏
        const allTags = ['tg-transcript', ...selectedTags];

        const content = `---
title: "${data.title}"
date: ${formattedDate}
tags: [${allTags.join(', ')}]
source: telegram-voice
mode: ${data.mode}
---

${data.content}`;

        const response = await axios.put(`${OBSIDIAN_URL}/vault/${encodeURIComponent(filepath)}`, content, {
            headers: {
                Authorization: `Bearer ${OBSIDIAN_API_KEY}`,
                'Content-Type': 'text/markdown',
            },
        });

        return { success: true, filepath, tags: selectedTags };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian:', error);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
function splitLongText(text, maxLength = 3500) {
    const parts = [];
    let currentPart = '';
    const lines = text.split('\n');

    for (const line of lines) {
        if ((currentPart + line + '\n').length > maxLength) {
            if (currentPart) {
                parts.push(currentPart.trim());
                currentPart = '';
            }
            if (line.length > maxLength) {
                const words = line.split(' ');
                let currentLine = '';
                for (const word of words) {
                    if ((currentLine + word + ' ').length > maxLength) {
                        parts.push(currentLine.trim());
                        currentLine = word + ' ';
                    } else {
                        currentLine += word + ' ';
                    }
                }
                if (currentLine) {
                    currentPart = currentLine;
                }
            } else {
                currentPart = line + '\n';
            }
        } else {
            currentPart += line + '\n';
        }
    }

    if (currentPart) {
        parts.push(currentPart.trim());
    }

    return parts;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è processVoice
async function processVoice(ctx, fileId, voiceMessageId, withFormatting, pendingKey = null) {
    const mode = withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;

    const loadingMessage = await ctx.reply(`${mode.emoji} ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤ —Ä–µ–∂–∏–º–µ "${mode.name}"...`, {
        reply_to_message_id: voiceMessageId,
    });

    try {
        const link = await ctx.telegram.getFileLink(fileId);
        const res = await fetch(link.href);
        const buffer = await res.arrayBuffer();
        const tmpPath = `/tmp/${uuid()}.ogg`;
        await writeFile(tmpPath, Buffer.from(buffer));

        const rawTranscript = await openai.audio.transcriptions.create({
            model: 'whisper-1',
            file: createReadStream(tmpPath),
            response_format: 'text',
            // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        });

        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ:', deleteError.message);
        }

        let messageContent;
        let title = '';

        if (withFormatting) {
            const improvedTranscript = await improveReadability(rawTranscript);
            title = await createTitle(improvedTranscript);
            messageContent = improvedTranscript;
        } else {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–∂–µ –¥–ª—è –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            title = await createTitle(rawTranscript);
            messageContent = rawTranscript;
        }

        const fullMessage = `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n\n**–ó–∞–≥–æ–ª–æ–≤–æ–∫:**\n\`${title}\`\n\n**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\`\`\`\n${messageContent}\n\`\`\``;

        let botReply;

        if (fullMessage.length > 4000) {
            const filename = `transcript_${new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-')}.txt`;
            const fileContent = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}\n\n${messageContent}`;

            const tmpFilePath = `/tmp/${filename}`;
            await writeFile(tmpFilePath, fileContent, 'utf8');

            botReply = await ctx.replyWithDocument(
                { source: tmpFilePath, filename: filename },
                {
                    caption:
                        `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n\n` +
                        `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\`\n\n` +
                        `üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.`,
                    parse_mode: 'Markdown',
                    reply_to_message_id: voiceMessageId,
                    ...createTranscriptKeyboard(voiceMessageId),
                }
            );

            try {
                const fs = await import('fs/promises');
                await fs.unlink(tmpFilePath);
            } catch (err) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', err.message);
            }
        } else {
            botReply = await ctx.reply(fullMessage, {
                parse_mode: 'Markdown',
                reply_to_message_id: voiceMessageId,
                ...createTranscriptKeyboard(voiceMessageId),
            });
        }

        const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
            content: messageContent,
            timestamp: new Date(),
            userId: ctx.from.id,
            mode: mode.name,
        });

        botMessageToVoice.set(botReply.message_id, { voiceMessageId, fileId });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        messageHistory.set(botReply.message_id, {
            userMessageId: voiceMessageId,
            botMessageIds: [loadingMessage.message_id], // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å
            type: 'voice'
        });

        setTimeout(() => {
            transcriptionCache.delete(cacheId);
            messageHistory.delete(botReply.message_id);
        }, 30 * 60 * 1000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (pendingKey) {
            const pendingData = pendingMessages.get(pendingKey);
            if (pendingData && pendingData.collectSession) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
                const session = pendingData.collectSession;
                const msgIndex = session.messages.findIndex(m => m.messageId === voiceMessageId);
                if (msgIndex !== -1) {
                    session.messages[msgIndex].type = 'voice';
                    session.messages[msgIndex].content = rawTranscript; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
                }
            }
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending
            pendingMessages.delete(pendingKey);
        }

        return botReply;
    } catch (error) {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ:', deleteError.message);
        }
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É"
bot.action(/add_note_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
    const transcriptionData = transcriptionCache.get(cacheId);

    if (!transcriptionData) {
        await ctx.answerCbQuery('‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    if (!OBSIDIAN_API_KEY) {
        await ctx.answerCbQuery('‚ùå API –∫–ª—é—á Obsidian –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        await ctx.editMessageReplyMarkup();
        await ctx.reply('‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Obsidian –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env:\nOBSIDIAN_API_KEY=–≤–∞—à_–∫–ª—é—á');
        return;
    }

    await ctx.answerCbQuery('üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–≥–∏...');

    try {
        const availableTags = await getObsidianTags();

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
        const recommendations = await getTagRecommendations(transcriptionData.content, availableTags);

        let tagsMessage = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:**\n';
        if (availableTags.length > 0) {
            tagsMessage += availableTags.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
        } else {
            tagsMessage += '_–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        tagsMessage += '\n\nü§ñ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ–≥–∏:**';
        if (recommendations.existing.length > 0) {
            tagsMessage += `\n–ò–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${recommendations.existing.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }
        if (recommendations.new.length > 0) {
            tagsMessage += `\n–ù–æ–≤—ã–µ: ${recommendations.new.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }

        tagsMessage += '\n\nüí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ì–° –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏';

        const tagSelectionMsg = await ctx.reply(tagsMessage, {
            parse_mode: 'Markdown',
        });

        tagSelectionState.set(ctx.from.id, {
            voiceMessageId,
            transcriptionData,
            tagSelectionMsgId: tagSelectionMsg.message_id,
            availableTags,
            botMessageId: ctx.callbackQuery.message.message_id // –¥–æ–±–∞–≤–ª—è–µ–º
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–≥–æ–≤:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏. –î–æ–±–∞–≤–ª—è—é –∑–∞–º–µ—Ç–∫—É –±–µ–∑ —Ç–µ–≥–æ–≤...');

        const result = await createObsidianNote(transcriptionData);
        if (result.success) {
            await ctx.editMessageReplyMarkup();
            await ctx.reply(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Obsidian!\nüìù ${transcriptionData.title}`, {
                parse_mode: 'Markdown',
            });
            transcriptionCache.delete(cacheId);
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ MP4
async function extractAudioFromVideo(videoPath, outputPath) {
    return new Promise((resolve, reject) => {
        ffmpeg(videoPath)
            .output(outputPath)
            .audioCodec('libopus')
            .format('ogg')
            .on('end', resolve)
            .on('error', reject)
            .run();
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
async function processVideo(ctx, fileId, videoMessageId, withFormatting, fileSize = 0, pendingKey = null) {
    const mode = withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - 20 –ú–ë)
    const MAX_FILE_SIZE = 20 * 1024 * 1024; // 20 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
    
    if (fileSize > MAX_FILE_SIZE) {
        await ctx.reply(
            '‚ö†Ô∏è *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π*\n\n' +
            `üìä –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: ${(fileSize / 1024 / 1024).toFixed(1)} –ú–ë\n` +
            `üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n\n` +
            'üí° *–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*\n' +
            '1. –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n' +
            '2. –û–±—Ä–µ–∂—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏\n' +
            '3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n' +
            '4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É',
            { 
                parse_mode: 'Markdown',
                reply_to_message_id: videoMessageId 
            }
        );
        return null;
    }

    const loadingMessage = await ctx.reply(`${mode.emoji} ‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤ —Ä–µ–∂–∏–º–µ "${mode.name}"...`, {
        reply_to_message_id: videoMessageId,
    });

    try {
        const link = await ctx.telegram.getFileLink(fileId);
        const res = await fetch(link.href);
        const buffer = await res.arrayBuffer();
        const videoPath = `/tmp/${uuid()}.mp4`;
        const audioPath = `/tmp/${uuid()}.ogg`;
        
        await writeFile(videoPath, Buffer.from(buffer));
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        await extractAudioFromVideo(videoPath, audioPath);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        await unlink(videoPath);

        const rawTranscript = await openai.audio.transcriptions.create({
            model: 'whisper-1',
            file: createReadStream(audioPath),
            response_format: 'text',
            // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        await unlink(audioPath);

        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ:', deleteError.message);
        }

        let messageContent;
        let title = '';

        if (withFormatting) {
            const improvedTranscript = await improveReadability(rawTranscript);
            title = await createTitle(improvedTranscript);
            messageContent = improvedTranscript;
        } else {
            title = await createTitle(rawTranscript);
            messageContent = rawTranscript;
        }

        const fullMessage = `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\nüé• *–ò—Å—Ç–æ—á–Ω–∏–∫: –≤–∏–¥–µ–æ*\n\n**–ó–∞–≥–æ–ª–æ–≤–æ–∫:**\n\`${title}\`\n\n**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\`\`\`\n${messageContent}\n\`\`\``;

        let botReply;

        if (fullMessage.length > 4000) {
            const filename = `transcript_${new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-')}.txt`;
            const fileContent = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}\n\n${messageContent}`;

            const tmpFilePath = `/tmp/${filename}`;
            await writeFile(tmpFilePath, fileContent, 'utf8');

            botReply = await ctx.replyWithDocument(
                { source: tmpFilePath, filename: filename },
                {
                    caption:
                        `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\nüé• *–ò—Å—Ç–æ—á–Ω–∏–∫: –≤–∏–¥–µ–æ*\n\n` +
                        `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\`\n\n` +
                        `üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.`,
                    parse_mode: 'Markdown',
                    reply_to_message_id: videoMessageId,
                    ...createTranscriptKeyboard(videoMessageId),
                }
            );

            await unlink(tmpFilePath);
        } else {
            botReply = await ctx.reply(fullMessage, {
                parse_mode: 'Markdown',
                reply_to_message_id: videoMessageId,
                ...createTranscriptKeyboard(videoMessageId),
            });
        }

        const cacheId = `${ctx.chat.id}_${videoMessageId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–í–∏–¥–µ–æ –∑–∞–º–µ—Ç–∫–∞',
            content: messageContent,
            timestamp: new Date(),
            userId: ctx.from.id,
            mode: mode.name,
        });

        botMessageToVoice.set(botReply.message_id, { voiceMessageId: videoMessageId, fileId });

        setTimeout(() => {
            transcriptionCache.delete(cacheId);
        }, 30 * 60 * 1000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (pendingKey) {
            const pendingData = pendingMessages.get(pendingKey);
            if (pendingData && pendingData.collectSession) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
                const session = pendingData.collectSession;
                const msgIndex = session.messages.findIndex(m => m.messageId === videoMessageId);
                if (msgIndex !== -1) {
                    session.messages[msgIndex].type = 'video';
                    session.messages[msgIndex].content = rawTranscript; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
                }
            }
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending
            pendingMessages.delete(pendingKey);
        }

        return botReply;
    } catch (error) {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (deleteError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ:', deleteError.message);
        }
        throw error;
    }
}

// ============= –ö–û–ú–ê–ù–î–´ –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø =============
// –í–ê–ñ–ù–û: –ö–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –î–û –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π!

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
bot.command(['collect', '–∑–∞–º–µ—Ç–∫–∞'], async (ctx) => {
    console.log('üìù –ö–æ–º–∞–Ω–¥–∞ /collect –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', ctx.from.username || ctx.from.id);
    const userId = ctx.from.id; // –≠—Ç–æ —á–∏—Å–ª–æ!
    const chatId = ctx.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    if (collectSessionState.has(userId)) {
        await ctx.reply(
            '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
            '‚Ä¢ `/done` –∏–ª–∏ `/–≥–æ—Ç–æ–≤–æ` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å\n' +
            '‚Ä¢ `/cancel` –∏–ª–∏ `/–æ—Ç–º–µ–Ω–∞` - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ\n' +
            '‚Ä¢ `/status` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å',
            { parse_mode: 'Markdown' }
        );
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const session = new CollectSession(userId, chatId);
    collectSessionState.set(userId, session);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /collect
    session.trackMessage(ctx.message.message_id, 'user_command');
    
    const statusMsg = await ctx.reply(
        'üìù *–†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n' +
        '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–æ–ª–æ—Å–æ–≤—ã–µ, —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ).\n' +
        '–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â—É—é –∑–∞–º–µ—Ç–∫—É.\n\n' +
        'üìä –°–æ–æ–±—â–µ–Ω–∏–π: 0\n\n' +
        '–ö–æ–º–∞–Ω–¥—ã:\n' +
        '‚Ä¢ `/done` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n' +
        '‚Ä¢ `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ\n' +
        '‚Ä¢ `/status` - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å',
        { parse_mode: 'Markdown' }
    );
    
    session.statusMessageId = statusMsg.message_id;
    session.trackMessage(statusMsg.message_id, 'bot_status');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
    session.timeoutTimer = setTimeout(async () => {
        if (collectSessionState.has(userId)) {
            await ctx.telegram.sendMessage(
                ctx.chat.id,
                '‚ö†Ô∏è –†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n' +
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ `/done` —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–π—á–∞—Å.'
            );
            
            // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 1 –º–∏–Ω—É—Ç—É
            session.timeoutTimer = setTimeout(async () => {
                if (collectSessionState.has(userId) && collectSessionState.get(userId) === session) {
                    collectSessionState.delete(userId);
                    await ctx.telegram.sendMessage(
                        ctx.chat.id,
                        '‚ùå –†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
                    );
                }
            }, 60000); // 1 –º–∏–Ω—É—Ç–∞
        }
    }, 300000); // 5 –º–∏–Ω—É—Ç
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
bot.command(['done', '–≥–æ—Ç–æ–≤–æ'], async (ctx) => {
    const userId = ctx.from.id;
    const session = collectSessionState.get(userId);
    
    if (!session) {
        await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/collect` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
        return;
    }
    
    if (session.getTotalCount() === 0) {
        await ctx.reply('‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
        return;
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /done
    session.trackMessage(ctx.message.message_id, 'user_command');
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    session.resetTimeout();
    
    const processingMsg = await ctx.reply(
        `‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${session.getTotalCount()} —Å–æ–æ–±—â–µ–Ω–∏–π...\n` +
        `üìä ${session.getStatusText()}`,
        { parse_mode: 'Markdown' }
    );
    
    session.trackMessage(processingMsg.message_id, 'bot_status');
    
    try {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        let combinedText = '';
        const withFormatting = userPreferences.get(userId) === true;
        
        for (const msg of session.messages) {
            if (msg.type === 'pending') {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º pending —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ
                combinedText += '[–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—Å–ø–µ–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è]\n\n';
            } else if (msg.type === 'text') {
                combinedText += msg.content + '\n\n';
            } else if (msg.type === 'voice') {
                if (msg.content) {
                    // –£–∂–µ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)
                    combinedText += msg.content + '\n\n';
                } else if (msg.fileId) {
                    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
                    const link = await ctx.telegram.getFileLink(msg.fileId);
                    const res = await fetch(link.href);
                    const buffer = await res.arrayBuffer();
                    const tmpPath = `/tmp/${uuid()}.ogg`;
                    await writeFile(tmpPath, Buffer.from(buffer));
                    
                    const transcript = await openai.audio.transcriptions.create({
                        model: 'whisper-1',
                        file: createReadStream(tmpPath),
                        response_format: 'text',
                    });
                    
                    await unlink(tmpPath);
                    combinedText += transcript + '\n\n';
                }
            } else if ((msg.type === 'video' || msg.type === 'audio') && msg.fileId) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
                try {
                    const link = await ctx.telegram.getFileLink(msg.fileId);
                    const res = await fetch(link.href);
                    const buffer = await res.arrayBuffer();
                    
                    let audioPath = `/tmp/${uuid()}.ogg`;
                    
                    if (msg.type === 'video') {
                        const videoPath = `/tmp/${uuid()}.mp4`;
                        await writeFile(videoPath, Buffer.from(buffer));
                        await extractAudioFromVideo(videoPath, audioPath);
                        await unlink(videoPath);
                    } else {
                        // –î–ª—è –∞—É–¥–∏–æ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        const inputPath = `/tmp/${uuid()}_audio`;
                        await writeFile(inputPath, Buffer.from(buffer));
                        
                        await new Promise((resolve, reject) => {
                            ffmpeg(inputPath)
                                .audioCodec('libopus')
                                .format('ogg')
                                .save(audioPath)
                                .on('end', resolve)
                                .on('error', reject);
                        });
                        await unlink(inputPath);
                    }
                    
                    const transcript = await openai.audio.transcriptions.create({
                        model: 'whisper-1',
                        file: createReadStream(audioPath),
                        response_format: 'text',
                    });
                    
                    await unlink(audioPath);
                    combinedText += transcript + '\n\n';
                } catch (err) {
                    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${msg.type}:`, err);
                }
            }
            // –§–æ—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å OCR –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        let finalContent = combinedText.trim();
        let title = '';
        
        if (withFormatting) {
            finalContent = await improveReadability(finalContent);
        }
        
        title = await createTitle(finalContent);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ
        await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const mode = getUserMode(userId);
        const fullMessage = 
            `${mode.emoji} *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞*\n` +
            `üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${session.getTotalCount()}\n\n` +
            `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:**\n\`${title}\`\n\n` +
            `**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n\`\`\`\n${finalContent}\n\`\`\``;
        
        let botReply;
        
        if (fullMessage.length > 4000) {
            const filename = `combined_note_${new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-')}.txt`;
            const fileContent = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}\n\n–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${session.getTotalCount()}\n${session.getStatusText()}\n\n${finalContent}`;
            
            const tmpFilePath = `/tmp/${filename}`;
            await writeFile(tmpFilePath, fileContent, 'utf8');
            
            botReply = await ctx.replyWithDocument(
                { source: tmpFilePath, filename: filename },
                {
                    caption:
                        `${mode.emoji} *–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞*\n` +
                        `üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ${session.getTotalCount()} (${session.getStatusText()})\n\n` +
                        `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\`\n\n` +
                        `üìÑ –ó–∞–º–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.`,
                    parse_mode: 'Markdown',
                    ...Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ Obsidian', `add_note_combined_${userId}`),
                            Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë', `delete_collect_${userId}`)
                        ]
                    ])
                }
            );
            
            await unlink(tmpFilePath);
        } else {
            botReply = await ctx.reply(fullMessage, {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [
                        Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ Obsidian', `add_note_combined_${userId}`),
                        Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë', `delete_collect_${userId}`)
                    ]
                ])
            });
        }
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        session.trackMessage(botReply.message_id, 'final_result');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Obsidian
        const cacheId = `${ctx.chat.id}_combined_${userId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞',
            content: finalContent,
            timestamp: new Date(),
            userId: userId,
            mode: mode.name,
            messagesCount: session.getTotalCount(),
            messagesInfo: session.getStatusText()
        });
        
        // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        collectSessionState.delete(userId);
        
        // –ù–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        completedSessionsMap.set(userId, session);
        
        setTimeout(() => {
            transcriptionCache.delete(cacheId);
            // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            completedSessionsMap.delete(userId);
        }, 30 * 60 * 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }
    
    // –ù–ï —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É, –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏!
    // –û–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç (30 –º–∏–Ω—É—Ç)
});

// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è  
bot.command(['cancel', '–æ—Ç–º–µ–Ω–∞'], async (ctx) => {
    const userId = ctx.from.id;
    const session = collectSessionState.get(userId);
    
    if (!session) {
        await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.');
        return;
    }
    
    session.resetTimeout();
    const count = session.getTotalCount();
    collectSessionState.delete(userId);
    
    await ctx.reply(
        `‚ùå *–†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω*\n\n` +
        `–£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${count} —Å–æ–æ–±—â–µ–Ω–∏–π`,
        { parse_mode: 'Markdown' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
bot.command('status', async (ctx) => {
    const userId = ctx.from.id;
    const session = collectSessionState.get(userId);
    
    if (!session) {
        await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/collect` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
        return;
    }
    
    const elapsed = Math.floor((new Date() - session.startTime) / 1000);
    const minutes = Math.floor(elapsed / 60);
    const seconds = elapsed % 60;
    
    await ctx.reply(
        `üìä *–°—Ç–∞—Ç—É—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è*\n\n` +
        `üìù –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${session.getTotalCount()}\n` +
        `üìã –î–µ—Ç–∞–ª–∏: ${session.getStatusText()}\n` +
        `‚è±Ô∏è –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: ${minutes}:${seconds.toString().padStart(2, '0')}\n\n` +
        `–ö–æ–º–∞–Ω–¥—ã:\n` +
        `‚Ä¢ `/done` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å\n` +
        `‚Ä¢ `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ`,
        { parse_mode: 'Markdown' }
    );
});

// ============= –ö–û–ù–ï–¶ –ö–û–ú–ê–ù–î –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø =============

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π (MP4)
bot.on('video', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message && !collectSessionState.has(userId)) {
        await handleReplyAndStartCollection(ctx, userId, ctx.message.reply_to_message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    const collectSession = collectSessionState.get(userId);
    if (collectSession) {
        const video = ctx.message.video;
        collectSession.addMessage('video', null, ctx.message.message_id, video.file_id);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        collectSession.trackMessage(ctx.message.message_id, 'user_content');
        
        const messageIndex = collectSession.getTotalCount();
        const replyMsg = await ctx.reply(
            `üé• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ #${messageIndex}\n` +
            `üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${collectSession.getTotalCount()}`,
            { reply_to_message_id: ctx.message.message_id }
        );
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        collectSession.trackMessage(replyMsg.message_id, 'bot_response');
        
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ MP4 —Ñ–∞–π–ª
    const video = ctx.message.video;
    const mimeType = video.mime_type;
    const fileSize = video.file_size || 0;
    
    if (mimeType && mimeType.includes('mp4')) {
        try {
            const user = ctx.message.from;
            const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
            console.log(`üìπ –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ MP4 –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId}), —Ä–∞–∑–º–µ—Ä: ${(fileSize / 1024 / 1024).toFixed(1)} –ú–ë`);

            const withFormatting = userPreferences.get(userId) === true;
            const fileId = video.file_id;
            const videoMessageId = ctx.message.message_id;
            
            // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
            const pendingKey = `${ctx.chat.id}_${videoMessageId}`;
            pendingMessages.set(pendingKey, {
                type: 'video',
                fileId: video.file_id,
                userId: userId,
                chatId: ctx.chat.id,
                startTime: new Date()
            });

            const botReply = await processVideo(ctx, fileId, videoMessageId, withFormatting, fileSize, pendingKey);
            
            if (botReply) {
                const mode = getUserMode(userId);
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
            }
        } catch (err) {
            console.error(err);
            // –£–¥–∞–ª—è–µ–º –∏–∑ pending –ø—Ä–∏ –æ—à–∏–±–∫–µ
            pendingMessages.delete(pendingKey);
            
            if (err.response && err.response.description === 'Bad Request: file is too big') {
                await ctx.reply(
                    '‚ùå *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n' +
                    'üìè Telegram API –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ 20 –ú–ë.\n' +
                    'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —á–∞—Å—Ç—è–º–∏.',
                    { parse_mode: 'Markdown', reply_to_message_id: ctx.message.message_id }
                );
            } else {
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ.');
            }
        }
    } else {
        await ctx.reply('‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ MP4 —Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
async function processAudioFile(ctx, fileId, messageId, withFormatting, fileName = 'audio') {
    const mode = withFormatting ? MODES.WITH_FORMAT : MODES.WITHOUT_FORMAT;
    
    const loadingMessage = await ctx.reply(
        `${mode.emoji} ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª "${fileName}"...`,
        { reply_to_message_id: messageId }
    );
    
    try {
        const link = await ctx.telegram.getFileLink(fileId);
        const res = await fetch(link.href);
        const buffer = await res.arrayBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const inputPath = `/tmp/${uuid()}_${fileName}`;
        await writeFile(inputPath, Buffer.from(buffer));
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG –¥–ª—è Whisper –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let audioPath = inputPath;
        if (!fileName.toLowerCase().endsWith('.ogg')) {
            audioPath = `/tmp/${uuid()}.ogg`;
            await new Promise((resolve, reject) => {
                ffmpeg(inputPath)
                    .audioCodec('libopus')
                    .format('ogg')
                    .save(audioPath)
                    .on('end', resolve)
                    .on('error', reject);
            });
            await unlink(inputPath);
        }
        
        const rawTranscript = await openai.audio.transcriptions.create({
            model: 'whisper-1',
            file: createReadStream(audioPath),
            response_format: 'text',
            // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        });
        
        await unlink(audioPath);
        
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (e) {}
        
        let messageContent;
        let title = '';
        
        if (withFormatting) {
            const improvedTranscript = await improveReadability(rawTranscript);
            title = await createTitle(improvedTranscript);
            messageContent = improvedTranscript;
        } else {
            title = await createTitle(rawTranscript);
            messageContent = rawTranscript;
        }
        
        const fullMessage = 
            `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n` +
            `üéµ *–ê—É–¥–∏–æ —Ñ–∞–π–ª: ${fileName}*\n\n` +
            `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:**\n\`${title}\`\n\n` +
            `**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\`\`\`\n${messageContent}\n\`\`\``;
        
        let botReply;
        
        if (fullMessage.length > 4000) {
            const filename = `transcript_${new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-')}.txt`;
            const fileContent = `–ò—Å—Ç–æ—á–Ω–∏–∫: ${fileName}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}\n\n${messageContent}`;
            
            const tmpFilePath = `/tmp/${filename}`;
            await writeFile(tmpFilePath, fileContent, 'utf8');
            
            botReply = await ctx.replyWithDocument(
                { source: tmpFilePath, filename: filename },
                {
                    caption:
                        `${mode.emoji} *–†–µ–∂–∏–º: ${mode.name}*\n` +
                        `üéµ *–ê—É–¥–∏–æ —Ñ–∞–π–ª: ${fileName}*\n\n` +
                        `**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\`\n\n` +
                        `üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º.`,
                    parse_mode: 'Markdown',
                    reply_to_message_id: messageId,
                    ...createTranscriptKeyboard(messageId),
                }
            );
            
            await unlink(tmpFilePath);
        } else {
            botReply = await ctx.reply(fullMessage, {
                parse_mode: 'Markdown',
                reply_to_message_id: messageId,
                ...createTranscriptKeyboard(messageId),
            });
        }
        
        const cacheId = `${ctx.chat.id}_${messageId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–ê—É–¥–∏–æ –∑–∞–º–µ—Ç–∫–∞',
            content: messageContent,
            timestamp: new Date(),
            userId: ctx.from.id,
            mode: mode.name,
            source: fileName
        });
        
        setTimeout(() => {
            transcriptionCache.delete(cacheId);
        }, 30 * 60 * 1000);
        
        return botReply;
    } catch (error) {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);
        } catch (e) {}
        throw error;
    }
}

// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
/* bot.use(async (ctx, next) => {
    const user = ctx.from;
    const username = user?.username ? `@${user.username}` : `${user?.first_name || 'Unknown'}`;
    
    console.log('\n=== –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===');
    console.log('–û—Ç:', username, `(ID: ${user?.id})`);
    console.log('–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', ctx.updateType);
    
    if (ctx.message) {
        console.log('–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', Object.keys(ctx.message).filter(k => 
            ['text', 'voice', 'document', 'video', 'audio', 'photo'].includes(k)
        ).join(', ') || 'unknown');
        
        if (ctx.message.document) {
            console.log('–î–æ–∫—É–º–µ–Ω—Ç:', {
                file_name: ctx.message.document.file_name,
                mime_type: ctx.message.document.mime_type,
                file_size: ctx.message.document.file_size,
                file_id: ctx.message.document.file_id?.substring(0, 20) + '...'
            });
        }
        
        if (ctx.message.audio) {
            console.log('–ê—É–¥–∏–æ:', {
                performer: ctx.message.audio.performer,
                title: ctx.message.audio.title,
                duration: ctx.message.audio.duration,
                mime_type: ctx.message.audio.mime_type,
                file_size: ctx.message.audio.file_size,
                file_id: ctx.message.audio.file_id?.substring(0, 20) + '...'
            });
        }
        
        if (ctx.message.voice) {
            console.log('–ì–æ–ª–æ—Å–æ–≤–æ–µ:', {
                duration: ctx.message.voice.duration,
                mime_type: ctx.message.voice.mime_type,
                file_size: ctx.message.voice.file_size
            });
        }
        
        if (ctx.message.video) {
            console.log('–í–∏–¥–µ–æ:', {
                duration: ctx.message.video.duration,
                mime_type: ctx.message.video.mime_type,
                file_size: ctx.message.video.file_size
            });
        }
        
        if (ctx.message.text) {
            console.log('–¢–µ–∫—Å—Ç:', ctx.message.text.substring(0, 100));
        }
    }
    
    console.log('===================\n');
    
    return next();
}); */

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–≥–¥–∞ Telegram —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –∞—É–¥–∏–æ)
bot.on('audio', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    const collectSession = collectSessionState.get(userId);
    if (collectSession) {
        const audio = ctx.message.audio;
        collectSession.addMessage('audio', null, ctx.message.message_id, audio.file_id);
        
        const messageIndex = collectSession.getTotalCount();
        await ctx.reply(
            `üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ #${messageIndex}\n` +
            `üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${collectSession.getTotalCount()}`,
            { reply_to_message_id: ctx.message.message_id }
        );
        return;
    }
    const audio = ctx.message.audio;
    const fileName = audio.file_name || `${audio.title || 'audio'}.${audio.mime_type?.split('/')[1] || 'mp3'}`;
    
    console.log('üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ AUDIO —Å–æ–æ–±—â–µ–Ω–∏—è:', fileName);
    
    try {
        const user = ctx.message.from;
        const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
        console.log(`üéµ –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ ${fileName} –æ—Ç ${username}, —Ä–∞–∑–º–µ—Ä: ${(audio.file_size / 1024 / 1024).toFixed(1)} –ú–ë`);
        
        const withFormatting = userPreferences.get(userId) === true;
        const fileId = audio.file_id;
        
        const botReply = await processAudioFile(ctx, fileId, ctx.message.message_id, withFormatting, fileName);
        
        if (botReply) {
            const mode = getUserMode(userId);
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—É–¥–∏–æ –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', err);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è MP4 –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤)
bot.on('document', async (ctx) => {
    const userId = ctx.from.id;
    const document = ctx.message.document;
    const fileName = document.file_name || 'file';
    const fileExt = fileName.toLowerCase().split('.').pop();
    
    console.log('üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ DOCUMENT:', fileName, '—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ:', fileExt);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message && !collectSessionState.has(userId) && fileExt === 'mp4') {
        await handleReplyAndStartCollection(ctx, userId, ctx.message.reply_to_message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ MP4 —Ñ–∞–π–ª
    if (fileExt === 'mp4') {
        const fileSize = document.file_size || 0;
        
        try {
            const user = ctx.message.from;
            const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
            console.log(`üìπ –ü–æ–ª—É—á–µ–Ω MP4 –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId}), —Ä–∞–∑–º–µ—Ä: ${(fileSize / 1024 / 1024).toFixed(1)} –ú–ë`);

            const withFormatting = userPreferences.get(userId) === true;
            const fileId = document.file_id;

            const botReply = await processVideo(ctx, fileId, ctx.message.message_id, withFormatting, fileSize);
            
            if (botReply) {
                const mode = getUserMode(userId);
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω MP4 –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
            }
        } catch (err) {
            console.error(err);
            if (err.response && err.response.description === 'Bad Request: file is too big') {
                await ctx.reply(
                    '‚ùå *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n' +
                    'üìè Telegram API –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ 20 –ú–ë.\n' +
                    'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —á–∞—Å—Ç—è–º–∏.',
                    { parse_mode: 'Markdown', reply_to_message_id: ctx.message.message_id }
                );
            } else {
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ.');
            }
        }
    } else if (['mp3', 'wav', 'ogg', 'oga', 'm4a', 'aac', 'flac', 'opus', 'webm'].includes(fileExt)) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        const fileSize = document.file_size || 0;
        const MAX_FILE_SIZE = 25 * 1024 * 1024; // 25 –ú–ë –¥–ª—è –∞—É–¥–∏–æ
        
        if (fileSize > MAX_FILE_SIZE) {
            await ctx.reply(
                '‚ö†Ô∏è *–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π*\n\n' +
                `üìä –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: ${(fileSize / 1024 / 1024).toFixed(1)} –ú–ë\n` +
                `üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 25 –ú–ë\n\n` +
                'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç',
                { parse_mode: 'Markdown', reply_to_message_id: ctx.message.message_id }
            );
            return;
        }
        
        try {
            const user = ctx.message.from;
            const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
            console.log(`üéµ –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª ${fileName} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId}), —Ä–∞–∑–º–µ—Ä: ${(fileSize / 1024 / 1024).toFixed(1)} –ú–ë`);
            
            const withFormatting = userPreferences.get(userId) === true;
            const fileId = document.file_id;
            
            const botReply = await processAudioFile(ctx, fileId, ctx.message.message_id, withFormatting, fileName);
            
            if (botReply) {
                const mode = getUserMode(userId);
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
            }
        } catch (err) {
            console.error(err);
            if (err.response && err.response.description === 'Bad Request: file is too big') {
                await ctx.reply(
                    '‚ùå *–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n' +
                    'üìè Telegram API –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ 20 –ú–ë.\n' +
                    'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –∞—É–¥–∏–æ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏.',
                    { parse_mode: 'Markdown', reply_to_message_id: ctx.message.message_id }
                );
            } else {
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª.');
            }
        }
    }
});


bot.command('video', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    const parts = text.split(' ');
    
    if (parts.length < 2) {
        await ctx.reply(
            'üìπ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ*\n\n' +
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n' +
            '`/video [—Å—Å—ã–ª–∫–∞_–Ω–∞_–≤–∏–¥–µ–æ]`\n\n' +
            '–ü—Ä–∏–º–µ—Ä—ã:\n' +
            '`/video https://youtube.com/watch?v=...`\n' +
            '`/video https://youtu.be/...`\n' +
            '`/video https://vt.tiktok.com/...`\n\n' +
            'üí° –ë–æ—Ç –∏–∑–≤–ª–µ—á–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ.\n' +
            '‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Å –≤–∏–¥–µ–æ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!\n' +
            'üéµ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç YouTube –∏ TikTok!',
            { parse_mode: 'Markdown' }
        );
        return;
    }
    
    const videoUrl = parts.slice(1).join(' ').trim();
    
    try {
        const withFormatting = userPreferences.get(userId) === true;
        await processVideoFromUrl(ctx, videoUrl, withFormatting);
        
        const mode = getUserMode(userId);
        const user = ctx.message.from;
        const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /video:', error);
    }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤
bot.on('voice', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message && !collectSessionState.has(userId)) {
        await handleReplyAndStartCollection(ctx, userId, ctx.message.reply_to_message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    const collectSession = collectSessionState.get(userId);
    if (collectSession) {
        const fileId = ctx.message.voice.file_id;
        collectSession.addMessage('voice', null, ctx.message.message_id, fileId);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        collectSession.trackMessage(ctx.message.message_id, 'user_content');
        
        const messageIndex = collectSession.getTotalCount();
        const replyMsg = await ctx.reply(
            `üé§ –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #${messageIndex}\n` +
            `üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${collectSession.getTotalCount()}`,
            { reply_to_message_id: ctx.message.message_id }
        );
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        collectSession.trackMessage(replyMsg.message_id, 'bot_response');
        
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    if (tagConfirmationState.has(userId)) {
        const confirmState = tagConfirmationState.get(userId);

        try {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.confirmMsgId);
            } catch (e) {}

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
            const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id);
            const res = await fetch(link.href);
            const buffer = await res.arrayBuffer();
            const tmpPath = `/tmp/${uuid()}.ogg`;
            await writeFile(tmpPath, Buffer.from(buffer));

            const tagVoiceText = await openai.audio.transcriptions.create({
                model: 'whisper-1',
                file: createReadStream(tmpPath),
                response_format: 'text',
                language: 'ru',
            });

            const selectedTags = await extractTagsFromVoice(tagVoiceText, confirmState.availableTags);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, confirmState.transcriptionData, confirmState.voiceMessageId, confirmState.availableTags);

            // –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
        }
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤
    if (tagSelectionState.has(userId)) {
        const state = tagSelectionState.get(userId);

        try {
            const link = await ctx.telegram.getFileLink(ctx.message.voice.file_id);
            const res = await fetch(link.href);
            const buffer = await res.arrayBuffer();
            const tmpPath = `/tmp/${uuid()}.ogg`;
            await writeFile(tmpPath, Buffer.from(buffer));

            const tagVoiceText = await openai.audio.transcriptions.create({
                model: 'whisper-1',
                file: createReadStream(tmpPath),
                response_format: 'text',
                language: 'ru',
            });

            const selectedTags = await extractTagsFromVoice(tagVoiceText, state.availableTags);

            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, state.transcriptionData, state.voiceMessageId, state.availableTags);

            tagSelectionState.delete(userId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
            tagSelectionState.delete(userId);
        }

        return;
    }

    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const voiceMessageId = ctx.message.message_id;
    
    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
    const pendingKey = `${ctx.chat.id}_${voiceMessageId}`;
    pendingMessages.set(pendingKey, {
        type: 'voice',
        fileId: ctx.message.voice.file_id,
        userId: userId,
        chatId: ctx.chat.id,
        startTime: new Date()
    });
    
    try {
        const user = ctx.message.from;
        const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
        console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);

        const withFormatting = userPreferences.get(userId) === true;
        const fileId = ctx.message.voice.file_id;

        const botReply = await processVoice(ctx, fileId, voiceMessageId, withFormatting, pendingKey);

        const mode = getUserMode(userId);
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} –≤ —Ä–µ–∂–∏–º–µ ${mode.name}`);
    } catch (err) {
        console.error(err);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
        // –£–¥–∞–ª—è–µ–º –∏–∑ pending –ø—Ä–∏ –æ—à–∏–±–∫–µ
        pendingMessages.delete(pendingKey);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (ctx.message.text.startsWith('/')) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.message.reply_to_message && !collectSessionState.has(userId)) {
        await handleReplyAndStartCollection(ctx, userId, ctx.message.reply_to_message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
    const collectSession = collectSessionState.get(userId);
    if (collectSession) {
        const text = ctx.message.text;
        collectSession.addMessage('text', text, ctx.message.message_id);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        collectSession.trackMessage(ctx.message.message_id, 'user_content');
        
        const messageIndex = collectSession.getTotalCount();
        const replyMsg = await ctx.reply(
            `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #${messageIndex}\n` +
            `üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${collectSession.getTotalCount()}`,
            { reply_to_message_id: ctx.message.message_id }
        );
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        collectSession.trackMessage(replyMsg.message_id, 'bot_response');
        
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    if (tagConfirmationState.has(userId)) {
        const confirmState = tagConfirmationState.get(userId);

        try {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.confirmMsgId);
            } catch (e) {}

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            const selectedTags = await extractTagsFromVoice(ctx.message.text, confirmState.availableTags);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, confirmState.transcriptionData, confirmState.voiceMessageId, confirmState.availableTags);

            // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
        }
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤
    if (tagSelectionState.has(userId)) {
        const state = tagSelectionState.get(userId);

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            const selectedTags = await extractTagsFromVoice(ctx.message.text, state.availableTags);

            // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
            } catch (e) {}

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await showTagConfirmation(ctx, selectedTags, state.transcriptionData, state.voiceMessageId, state.availableTags);

            tagSelectionState.delete(userId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–≥–æ–≤:', error);
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏');
            tagSelectionState.delete(userId);
        }

        return;
    }
    
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏)
    try {
        const messageText = ctx.message.text;
        const messageId = ctx.message.message_id;
        
        const title = await createTitle(messageText);
        const responseText = `üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`${title}\``;
        
        const botReply = await ctx.reply(responseText, {
            parse_mode: 'Markdown',
            reply_to_message_id: messageId,
            ...Markup.inlineKeyboard([
                [Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É', `add_note_text_${messageId}`)]
            ])
        });
        
        const cacheId = `${ctx.chat.id}_text_${messageId}`;
        transcriptionCache.set(cacheId, {
            title: title || '–¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
            content: messageText,
            timestamp: new Date(),
            userId: ctx.from.id,
            mode: '–¢–µ–∫—Å—Ç',
            isText: true
        });
        
        setTimeout(() => {
            transcriptionCache.delete(cacheId);
        }, 30 * 60 * 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É" –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.action(/add_note_(text_|combined_)?(.+)/, async (ctx) => {
    const prefix = ctx.match[1];
    const isText = prefix === 'text_';
    const isCombined = prefix === 'combined_';
    const messageId = ctx.match[2];
    let cacheId;
    if (isCombined) {
        cacheId = `${ctx.chat.id}_combined_${messageId}`;
    } else if (isText) {
        cacheId = `${ctx.chat.id}_text_${messageId}`;
    } else {
        cacheId = `${ctx.chat.id}_${messageId}`;
    }
    const transcriptionData = transcriptionCache.get(cacheId);

    if (!transcriptionData) {
        await ctx.answerCbQuery('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    if (!OBSIDIAN_API_KEY) {
        await ctx.answerCbQuery('‚ùå API –∫–ª—é—á Obsidian –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        await ctx.editMessageReplyMarkup();
        await ctx.reply('‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Obsidian –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env:\nOBSIDIAN_API_KEY=–≤–∞—à_–∫–ª—é—á');
        return;
    }

    await ctx.answerCbQuery('üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–≥–∏...');

    try {
        const availableTags = await getObsidianTags();

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
        const recommendations = await getTagRecommendations(transcriptionData.content, availableTags);

        let tagsMessage = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:**\n';
        if (availableTags.length > 0) {
            tagsMessage += availableTags.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ');
        } else {
            tagsMessage += '_–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        tagsMessage += '\n\nü§ñ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ–≥–∏:**';
        if (recommendations.existing.length > 0) {
            tagsMessage += `\n–ò–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${recommendations.existing.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }
        if (recommendations.new.length > 0) {
            tagsMessage += `\n–ù–æ–≤—ã–µ: ${recommendations.new.map((tag) => `#${tag.replace(/_/g, '\\_')}`).join(', ')}`;
        }

        tagsMessage += '\n\nüí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ì–° –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏';

        const tagSelectionMsg = await ctx.reply(tagsMessage, {
            parse_mode: 'Markdown',
        });

        tagSelectionState.set(ctx.from.id, {
            voiceMessageId: messageId,
            transcriptionData,
            tagSelectionMsgId: tagSelectionMsg.message_id,
            availableTags,
            isText: isText, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥
            botMessageId: ctx.callbackQuery.message.message_id // –¥–æ–±–∞–≤–ª—è–µ–º
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–≥–æ–≤:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥–∏. –î–æ–±–∞–≤–ª—è—é –∑–∞–º–µ—Ç–∫—É –±–µ–∑ —Ç–µ–≥–æ–≤...');
 
        const result = await createObsidianNote(transcriptionData);
        if (result.success) {
            await ctx.editMessageReplyMarkup();
            await ctx.reply(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Obsidian!\nüìù ${transcriptionData.title}`, {
                parse_mode: 'Markdown',
            });
            transcriptionCache.delete(cacheId);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ"
bot.action(/keep_voice_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const cacheId = `${ctx.chat.id}_${voiceMessageId}`;

    await ctx.editMessageReplyMarkup();
    await ctx.answerCbQuery('üëå –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');

    transcriptionCache.delete(cacheId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
bot.action(/delete_msg_(.+)/, async (ctx) => {
    const messageId = ctx.match[1];
    const historyData = messageHistory.get(ctx.callbackQuery.message.message_id);
    
    let deletedCount = 0;
    let errors = 0;
    
    try {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏)
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.callbackQuery.message.message_id);
        deletedCount++;
    } catch (e) {
        errors++;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if (historyData) {
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (historyData.userMessageId) {
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, historyData.userMessageId);
                deletedCount++;
            } catch (e) {
                errors++;
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        if (historyData.botMessageIds) {
            for (const msgId of historyData.botMessageIds) {
                try {
                    await ctx.telegram.deleteMessage(ctx.chat.id, msgId);
                    deletedCount++;
                } catch (e) {
                    errors++;
                }
            }
        }
        
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        messageHistory.delete(ctx.callbackQuery.message.message_id);
    } else {
        // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ messageId
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, messageId);
            deletedCount++;
        } catch (e) {
            errors++;
        }
    }
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à–∏
    const cacheId = `${ctx.chat.id}_${messageId}`;
    transcriptionCache.delete(cacheId);
    transcriptionCache.delete(`${ctx.chat.id}_text_${messageId}`);
    
    if (errors === 0) {
        await ctx.answerCbQuery(`‚úÖ –£–¥–∞–ª–µ–Ω–æ`);
    } else {
        await ctx.answerCbQuery(`‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ`);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
bot.action(/delete_collect_(.+)/, async (ctx) => {
    const callbackId = ctx.callbackQuery.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç callback
    if (processedCallbacks.has(callbackId)) {
        await ctx.answerCbQuery('–£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    processedCallbacks.add(callbackId);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –∏–∑ –ø–∞–º—è—Ç–∏
    setTimeout(() => {
        processedCallbacks.delete(callbackId);
    }, 5000);
    
    const userId = ctx.match[1];
    console.log('üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è userId:', userId);
    console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', Array.from(collectSessionState.keys()));
    console.log('üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', Array.from(completedSessionsMap.keys()));
    
    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤!
    try {
        await ctx.answerCbQuery();
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:', e);
        processedCallbacks.delete(callbackId);
        return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const userIdNum = parseInt(userId);
    // –ò—â–µ–º —Å–µ—Å—Å–∏—é —Å–Ω–∞—á–∞–ª–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ—Ç–æ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
    let session = collectSessionState.get(userId) || collectSessionState.get(userIdNum) ||
                  completedSessionsMap.get(userId) || completedSessionsMap.get(userIdNum);
    
    if (!session) {
        console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è userId:', userId, '–∏–ª–∏', userIdNum);
        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Å—Å–∏—è —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try {
            await ctx.editMessageReplyMarkup();
        } catch (e) {}
        return;
    }
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–π:', session.allMessageIds.length);
    
    const totalMessages = session.allMessageIds.length;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    try {
        const confirmMsg = await ctx.reply(
            `‚ö†Ô∏è *–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏?*\n\n` +
            `–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: ${totalMessages} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [
                        Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_collect_${userId}`),
                        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_delete_collect_${userId}`)
                    ]
                ])
            }
        );
        
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏!
        // –û–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', e);
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
bot.action(/confirm_delete_collect_(.+)/, async (ctx) => {
    const userId = ctx.match[1];
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
    await ctx.answerCbQuery('‚è≥ –£–¥–∞–ª—è—é...');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const userIdNum = parseInt(userId);
    // –ò—â–µ–º —Å–µ—Å—Å–∏—é —Å–Ω–∞—á–∞–ª–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –ø–æ—Ç–æ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
    let session = collectSessionState.get(userId) || collectSessionState.get(userIdNum) ||
                  completedSessionsMap.get(userId) || completedSessionsMap.get(userIdNum);
    
    if (!session) {
        try {
            await ctx.deleteMessage();
        } catch (e) {}
        return;
    }
    
    console.log(`üìä –£–¥–∞–ª–µ–Ω–∏–µ ${session.allMessageIds.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    let deletedCount = 0;
    let errors = 0;
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
    for (const msg of session.allMessageIds) {
        try {
            await ctx.telegram.deleteMessage(session.chatId, msg.id);
            deletedCount++;
        } catch (e) {
            errors++;
        }
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    try {
        await ctx.deleteMessage();
    } catch (e) {}
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –∫—ç—à–∏ (—É–¥–∞–ª—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞)
    collectSessionState.delete(userId);
    collectSessionState.delete(userIdNum);
    const cacheId = `${ctx.chat.id}_combined_${userId}`;
    transcriptionCache.delete(cacheId);
    transcriptionCache.delete(`${ctx.chat.id}_combined_${userIdNum}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultMsg = await ctx.reply(
        `‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω–∞\n` +
        `üìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} –∏–∑ ${session.allMessageIds.length} —Å–æ–æ–±—â–µ–Ω–∏–π`,
        { parse_mode: 'Markdown' }
    );
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, resultMsg.message_id);
        } catch (e) {}
    }, 3000);
});

// –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
bot.action(/cancel_delete_collect_(.+)/, async (ctx) => {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
    await ctx.answerCbQuery('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
    
    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    try {
        await ctx.deleteMessage();
    } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', e);
    }
});

bot.action(/confirm_tags_(.+)/, async (ctx) => {
    const voiceMessageId = ctx.match[1];
    const userId = ctx.from.id;
    const confirmState = tagConfirmationState.get(userId);

    if (!confirmState || confirmState.voiceMessageId !== voiceMessageId) {
        await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
        return;
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É
        const result = await createObsidianNote(confirmState.transcriptionData, confirmState.selectedTags);

        if (result.success) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.confirmMsgId);
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–≥–æ–≤
            if (confirmState.tagSelectionMsgId) {
                try {
                    await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.tagSelectionMsgId);
                } catch (e) {}
            }
            
            // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if (confirmState.botMessageId) {
                try {
                    await ctx.telegram.deleteMessage(ctx.chat.id, confirmState.botMessageId);
                } catch (e) {}
            }

            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const cacheId = `${ctx.chat.id}_${voiceMessageId}`;
            const botMsg = Array.from(botMessageToVoice.entries()).find(([msgId, data]) => data.voiceMessageId === voiceMessageId);
            if (botMsg) {
                await ctx.telegram.editMessageReplyMarkup(ctx.chat.id, botMsg[0]);
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            const structuredTags = confirmState.selectedTagsStructured || { existing: confirmState.selectedTags, new: [] };
            let tagsStr = '';

            if (structuredTags.existing.length > 0 || structuredTags.new.length > 0) {
                tagsStr = '\n';
                if (structuredTags.existing.length > 0) {
                    tagsStr += `\nüìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: ${structuredTags.existing.map((t) => `#${t.replace(/_/g, '\\_')}`).join(', ')}`;
                }
                if (structuredTags.new.length > 0) {
                    tagsStr += `\nüÜï –ù–æ–≤—ã–µ: ${structuredTags.new.map((t) => `#${t.replace(/_/g, '\\_')}`).join(', ')}`;
                }
            } else if (confirmState.selectedTags.length > 0) {
                // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                tagsStr = `\nüè∑Ô∏è –¢–µ–≥–∏: ${confirmState.selectedTags.map((t) => `#${t.replace(/_/g, '\\_')}`).join(', ')}`;
            }

            await ctx.answerCbQuery('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
            await ctx.reply(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Obsidian!${tagsStr}\nüìù ${confirmState.transcriptionData.title}`, {
                parse_mode: 'Markdown',
            });

            transcriptionCache.delete(cacheId);
            tagConfirmationState.delete(userId);
        } else {
            await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(
        `ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!*\n\n` +
            `${mode.emoji} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *${mode.name}*\n\n` +
            `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `/format - —Ä–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ${MODES.WITH_FORMAT.emoji}\n` +
            `/noformat - —Ä–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${MODES.WITHOUT_FORMAT.emoji}\n` +
            `/toggle - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞\n` +
            `/mode - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n` +
            `/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n` +
            `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏! üéôÔ∏è`,
        { parse_mode: 'Markdown' }
    );
});
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.command('format', async (ctx) => {
    const userId = ctx.from.id;

    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                userPreferences.set(userId, true);
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);
                botMessageToVoice.delete(botMessage.message_id);
                await processVoice(ctx, voiceData.fileId, voiceData.voiceMessageId, true);
                return;
            } catch (error) {
                console.error('Error processing format command:', error);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                return;
            }
        }
    }

    userPreferences.set(userId, true);
    ctx.reply(
        `${MODES.WITH_FORMAT.emoji} *–†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: ${MODES.WITH_FORMAT.name}*\n\n–í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.`,
        {
            parse_mode: 'Markdown',
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.command('noformat', async (ctx) => {
    const userId = ctx.from.id;

    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                userPreferences.set(userId, false);
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);
                botMessageToVoice.delete(botMessage.message_id);
                await processVoice(ctx, voiceData.fileId, voiceData.voiceMessageId, false);
                return;
            } catch (error) {
                console.error('Error processing noformat command:', error);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                return;
            }
        }
    }

    userPreferences.set(userId, false);
    ctx.reply(
        `${MODES.WITHOUT_FORMAT.emoji} *–†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: ${MODES.WITHOUT_FORMAT.name}*\n\n–í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        {
            parse_mode: 'Markdown',
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
bot.command('toggle', (ctx) => {
    const userId = ctx.from.id;
    const currentMode = userPreferences.get(userId) === true;
    userPreferences.set(userId, !currentMode);

    const newMode = getUserMode(userId);
    ctx.reply(`${newMode.emoji} *–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${newMode.name}*\n\n${newMode.description}`, {
        parse_mode: 'Markdown',
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
bot.command('mode', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(`${mode.emoji} *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${mode.name}*\n\n${mode.description}`, {
        parse_mode: 'Markdown',
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
async function handleDelete(ctx) {
    if (ctx.message.reply_to_message && ctx.message.reply_to_message.from?.is_bot) {
        const botMessage = ctx.message.reply_to_message;
        const voiceData = botMessageToVoice.get(botMessage.message_id);

        if (voiceData) {
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, botMessage.message_id);
                await ctx.telegram.deleteMessage(ctx.chat.id, voiceData.voiceMessageId);
                botMessageToVoice.delete(botMessage.message_id);
                return;
            } catch (error) {
                console.error('Error processing delete command:', error);
                return;
            }
        }
    }

    try {
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
    } catch (error) {
        console.error('Error deleting command message:', error);
    }
}

bot.command('d', handleDelete);
bot.command('del', handleDelete);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
bot.command(['del_start', 'delstart', 'ds'], async (ctx) => {
    const userId = ctx.from.id;

    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = ctx.message.reply_to_message.message_id;
    deleteRangeStart.set(userId, startMessageId);

    const confirmMessage = await ctx.reply('‚úÖ –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /del_end –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
        reply_to_message_id: ctx.message.message_id,
    });

    try {
        await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, confirmMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', error);
        }
    }, 5000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è
bot.command(['del_end', 'delend', 'de'], async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∫–æ–Ω—Ü–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = deleteRangeStart.get(userId);
    if (!startMessageId) {
        await ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /del_start', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const endMessageId = ctx.message.reply_to_message.message_id;
    const fromId = Math.min(startMessageId, endMessageId);
    const toId = Math.max(startMessageId, endMessageId);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
    const MAX_RANGE = 10000; // –ú–∞–∫—Å–∏–º—É–º 10000 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
    const actualToId = Math.min(toId, fromId + MAX_RANGE);

    const progressMessage = await ctx.reply(
        `üóëÔ∏è –£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...\n` +
        `üìä –î–∏–∞–ø–∞–∑–æ–Ω: ${fromId} - ${actualToId}\n` +
        `‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...`
    );

    let deletedCount = 0;
    let failedCount = 0;
    let lastDeletedId = null;
    let consecutiveFailures = 0;

    // –£–¥–∞–ª—è–µ–º –ø–∞—á–∫–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const BATCH_SIZE = 50;
    for (let batchStart = fromId; batchStart <= actualToId; batchStart += BATCH_SIZE) {
        const batchEnd = Math.min(batchStart + BATCH_SIZE - 1, actualToId);
        const deletePromises = [];
        
        for (let messageId = batchStart; messageId <= batchEnd; messageId++) {
            deletePromises.push(
                ctx.telegram.deleteMessage(chatId, messageId)
                    .then(() => {
                        deletedCount++;
                        lastDeletedId = messageId;
                        consecutiveFailures = 0;
                        return true;
                    })
                    .catch(() => {
                        failedCount++;
                        consecutiveFailures++;
                        return false;
                    })
            );
        }
        
        await Promise.all(deletePromises);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (deletedCount > 0 && deletedCount % 50 === 0) {
            try {
                await ctx.telegram.editMessageText(
                    chatId,
                    progressMessage.message_id,
                    null,
                    `üóëÔ∏è –£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...\n` +
                    `‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}\n` +
                    `‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${batchEnd - fromId + 1} –∏–∑ ${actualToId - fromId + 1}`
                );
            } catch (e) {}
        }
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (consecutiveFailures > 100) {
            console.log('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ');
            break;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    try {
        await ctx.telegram.deleteMessage(chatId, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    deleteRangeStart.delete(userId);

    try {
        await ctx.telegram.editMessageText(
            chatId,
            progressMessage.message_id,
            null,
            `‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error);
    }

    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(chatId, progressMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', error);
        }
    }, 5000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
bot.command(['del_all', 'delall', 'da'], async (ctx) => {
    const chatId = ctx.chat.id;

    if (!ctx.message.reply_to_message) {
        await ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', {
            reply_to_message_id: ctx.message.message_id,
        });
        return;
    }

    const startMessageId = ctx.message.reply_to_message.message_id;
    const currentMessageId = ctx.message.message_id;

    const progressMessage = await ctx.reply(`üóëÔ∏è –£–¥–∞–ª—è—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å ID ${startMessageId} (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)...`);

    let deletedCount = 0;
    let failedCount = 0;
    let consecutiveFailures = 0;

    const maxMessageId = currentMessageId + 1000;

    for (let messageId = startMessageId; messageId <= maxMessageId; messageId++) {
        try {
            await ctx.telegram.deleteMessage(chatId, messageId);
            deletedCount++;
            consecutiveFailures = 0;

            if (deletedCount % 10 === 0) {
                await new Promise((resolve) => setTimeout(resolve, 100));
            }
        } catch (error) {
            failedCount++;
            consecutiveFailures++;

            if (consecutiveFailures >= 50) {
                console.log(`–ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${consecutiveFailures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥`);
                break;
            }
        }
    }

    try {
        await ctx.telegram.deleteMessage(chatId, ctx.message.message_id);
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
    }

    try {
        await ctx.telegram.editMessageText(
            chatId,
            progressMessage.message_id,
            null,
            `‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\nüìç –ù–∞—á–∏–Ω–∞—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${startMessageId}`
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error);
    }

    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(chatId, progressMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', error);
        }
    }, 7000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command(['clear', 'cls'], async (ctx) => {
    const chatId = ctx.chat.id;
    const text = ctx.message.text;
    const parts = text.split(' ');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    let count = 100; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100
    if (parts.length > 1) {
        const num = parseInt(parts[1]);
        if (!isNaN(num) && num > 0) {
            count = Math.min(num, 1000); // –ú–∞–∫—Å–∏–º—É–º 1000
        }
    }
    
    const currentMessageId = ctx.message.message_id;
    const startId = Math.max(1, currentMessageId - count);
    
    const progressMessage = await ctx.reply(
        `üóëÔ∏è –£–¥–∞–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${count} —Å–æ–æ–±—â–µ–Ω–∏–π...\n` +
        `‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...`
    );
    
    let deletedCount = 0;
    let failedCount = 0;
    
    // –£–¥–∞–ª—è–µ–º –ø–∞—á–∫–∞–º–∏
    const BATCH_SIZE = 20;
    for (let batchStart = currentMessageId; batchStart >= startId; batchStart -= BATCH_SIZE) {
        const batchEnd = Math.max(batchStart - BATCH_SIZE + 1, startId);
        const deletePromises = [];
        
        for (let messageId = batchStart; messageId >= batchEnd; messageId--) {
            deletePromises.push(
                ctx.telegram.deleteMessage(chatId, messageId)
                    .then(() => {
                        deletedCount++;
                        return true;
                    })
                    .catch(() => {
                        failedCount++;
                        return false;
                    })
            );
        }
        
        await Promise.all(deletePromises);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if ((deletedCount + failedCount) % 50 === 0) {
            try {
                await ctx.telegram.editMessageText(
                    chatId,
                    progressMessage.message_id,
                    null,
                    `üóëÔ∏è –£–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...\n` +
                    `‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}\n` +
                    `‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount}`
                );
            } catch (e) {}
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
        await ctx.telegram.editMessageText(
            chatId,
            progressMessage.message_id,
            null,
            `‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n` +
            `üìä –£–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
            `‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`
        );
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error);
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
        try {
            await ctx.telegram.deleteMessage(chatId, progressMessage.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:', error);
        }
    }, 5000);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
bot.command(['del_cancel', 'delcancel', 'dc'], async (ctx) => {
    const userId = ctx.from.id;

    if (deleteRangeStart.has(userId)) {
        deleteRangeStart.delete(userId);
        const msg = await ctx.reply('‚ùå –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.');

        try {
            await ctx.telegram.deleteMessage(ctx.chat.id, ctx.message.message_id);
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:', error);
        }

        setTimeout(async () => {
            try {
                await ctx.telegram.deleteMessage(ctx.chat.id, msg.message_id);
            } catch (error) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:', error);
            }
        }, 3000);
    } else {
        await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É  
// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
bot.command('help', (ctx) => {
    const mode = getUserMode(ctx.from.id);
    ctx.reply(
        `ü§ñ *–ë–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n` +
            `${mode.emoji} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *${mode.name}*\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ.\n\n` +
            `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
            `${MODES.WITH_FORMAT.emoji} \`/format\` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫)\n` +
            `${MODES.WITHOUT_FORMAT.emoji} \`/noformat\` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)\n` +
            `üîÑ \`/toggle\` - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏\n` +
            `‚ÑπÔ∏è \`/mode\` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n` +
            `üßπ \`/clear [N]\` - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)\n` +
            `üóëÔ∏è \`/d\` –∏–ª–∏ \`/del\` - —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É\n` +
            `üìç \`/del_start\` - –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n` +
            `üìç \`/del_end\` - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω–µ—Ü –∏ —É–¥–∞–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
            `üßπ \`/del_all\` - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ\n` +
            `‚ùå \`/del_cancel\` - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n` +
            `üÜò \`/help\` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
            `üè† \`/start\` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n\n` +
            `üí° *–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:*\n` +
            `${MODES.WITH_FORMAT.emoji} **–° —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:** –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n` +
            `${MODES.WITHOUT_FORMAT.emoji} **–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞\n\n` +
            `üìù *Obsidian –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:*\n` +
            `–ü–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ Obsidian.\n` +
            `–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–≥–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n` +
            `üé• *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ:*\n` +
            `‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ MP4 —Ñ–∞–π–ª (–¥–æ 20 –ú–ë)\n\n` +
            `üéµ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ:*\n` +
            `‚Ä¢ MP3, WAV, OGG, M4A, AAC, FLAC, OPUS, WebM\n` +
            `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 25 –ú–ë\n\n` +
            `üí¨ *–°–æ–≤–µ—Ç:* –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /format –∏–ª–∏ /noformat, —á—Ç–æ–±—ã –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ!\n\n` +
            `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:*\n` +
            `‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: /del_start –Ω–∞ –ø–µ—Ä–≤–æ–µ ‚Üí /del_end –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ\n` +
            `‚Ä¢ –í—Å–µ –ø–æ—Å–ª–µ: /del_all –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí —É–¥–∞–ª–∏—Ç –≤—Å–µ –ø–æ—Å–ª–µ –Ω–µ–≥–æ\n\n` +
            `üìù *–†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è (–Ω–æ–≤–æ–µ!):*\n` +
            `‚Ä¢ \`/collect\` - –Ω–∞—á–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n` +
            `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ, —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ\n` +
            `‚Ä¢ \`/done\` - –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –≤ –æ–¥–Ω—É –∑–∞–º–µ—Ç–∫—É\n` +
            `‚Ä¢ \`/cancel\` - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ\n` +
            `‚Ä¢ \`/status\` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è\n\n` +
            `üìù –¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`,
        { parse_mode: 'Markdown' }
    );
});

bot.launch();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
bot.telegram.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: 'collect', description: '–ù–∞—á–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π üìù' },
    { command: 'done', description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ ‚úÖ' },
    { command: 'cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ ‚ùå' },
    { command: 'status', description: '–°—Ç–∞—Ç—É—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è üìä' },
    { command: 'format', description: '–†–µ–∂–∏–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º üé®' },
    { command: 'noformat', description: '–†–µ–∂–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üìù' },
    { command: 'toggle', description: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º' },
    { command: 'mode', description: '–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º' },
    { command: 'clear', description: '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π üßπ' },
    { command: 'd', description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üóëÔ∏è' },
    { command: 'del', description: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üóëÔ∏è' },
    { command: 'del_start', description: '–ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è üìç' },
    { command: 'del_end', description: '–ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ üìç' },
    { command: 'del_all', description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è üßπ' },
    { command: 'del_cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚ùå' },
    { command: 'help', description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
]);

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
