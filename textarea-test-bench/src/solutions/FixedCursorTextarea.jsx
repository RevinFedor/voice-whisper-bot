import React, { useRef, useLayoutEffect, useState, useCallback } from 'react';

// –†–ï–®–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 0 –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
const FixedCursorTextarea = ({ value, onChange }) => {
  const textAreaRef = useRef(null);
  const [cursorPosition, setCursorPosition] = useState(0);
  const [selectionEnd, setSelectionEnd] = useState(0);
  const [scrollTop, setScrollTop] = useState(0);
  const [isFirstInteraction, setIsFirstInteraction] = useState(true);

  // useLayoutEffect —Ä–∞–±–æ—Ç–∞–µ—Ç –°–ò–ù–•–†–û–ù–ù–û –ø–æ—Å–ª–µ DOM –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –Ω–æ –ü–ï–†–ï–î –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
  useLayoutEffect(() => {
    const textArea = textAreaRef.current;
    if (textArea && !isFirstInteraction) {
      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é:', { 
        cursor: cursorPosition, 
        selectionEnd, 
        scrollTop 
      });
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
      textArea.setSelectionRange(cursorPosition, selectionEnd);
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
      textArea.scrollTop = scrollTop;
    }
  }, [value, cursorPosition, selectionEnd, scrollTop, isFirstInteraction]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleChange = useCallback((e) => {
    console.log('‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞');
    const target = e.target;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ü–ï–†–ï–î –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    setCursorPosition(target.selectionStart);
    setSelectionEnd(target.selectionEnd);
    setScrollTop(target.scrollTop);
    
    // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –±—ã–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    setIsFirstInteraction(false);
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤–µ—Ä—Ö
    onChange && onChange(target.value);
  }, [onChange]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
  const handleScroll = useCallback((e) => {
    setScrollTop(e.target.scrollTop);
    console.log('üìú –°–∫—Ä–æ–ª–ª:', e.target.scrollTop);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleSelect = useCallback((e) => {
    const target = e.target;
    setCursorPosition(target.selectionStart);
    setSelectionEnd(target.selectionEnd);
    console.log('üéØ –í—ã–¥–µ–ª–µ–Ω–∏–µ:', { 
      start: target.selectionStart, 
      end: target.selectionEnd 
    });
  }, []);

  // –ö–†–ò–¢–ò–ß–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞/—Ñ–æ–∫—É—Å–∞
  const handleClick = useCallback((e) => {
    const target = e.target;
    
    if (isFirstInteraction) {
      console.log('üëÜ –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–∏–Ω–≥–∞
      requestAnimationFrame(() => {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≥–¥–µ –∫–ª–∏–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const clickedPosition = target.selectionStart;
        
        console.log('üìç –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–ª–∏–∫–∞:', clickedPosition);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if (clickedPosition >= 0) {
          target.setSelectionRange(clickedPosition, clickedPosition);
          setCursorPosition(clickedPosition);
          setSelectionEnd(clickedPosition);
        }
      });
      
      setIsFirstInteraction(false);
    } else {
      // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
      setCursorPosition(target.selectionStart);
      setSelectionEnd(target.selectionEnd);
    }
  }, [isFirstInteraction]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞
  const handleFocus = useCallback((e) => {
    const target = e.target;
    
    if (isFirstInteraction) {
      console.log('üéØ –ü–µ—Ä–≤—ã–π —Ñ–æ–∫—É—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
      setTimeout(() => {
        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤—Å–µ –µ—â–µ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
        if (target.selectionStart === 0 && value.length > 0) {
          const endPosition = value.length;
          target.setSelectionRange(endPosition, endPosition);
          setCursorPosition(endPosition);
          setSelectionEnd(endPosition);
          console.log('üîß –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞:', endPosition);
        }
      }, 0);
    }
  }, [isFirstInteraction, value]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
  const handleKeyDown = useCallback((e) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä—ã–∂–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
    if (e.key === 'Enter') {
      const target = e.target;
      setCursorPosition(target.selectionStart);
      setSelectionEnd(target.selectionEnd);
      setScrollTop(target.scrollTop);
      console.log('‚èé Enter –Ω–∞–∂–∞—Ç, –ø–æ–∑–∏—Ü–∏—è:', target.selectionStart);
    }
  }, []);

  return (
    <div>
      <textarea
        ref={textAreaRef}
        value={value}
        onChange={handleChange}
        onScroll={handleScroll}
        onSelect={handleSelect}
        onClick={handleClick}
        onFocus={handleFocus}
        onKeyDown={handleKeyDown}
        placeholder="–ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ - –∫—É—Ä—Å–æ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –≤—ã –∫–ª–∏–∫–Ω—É–ª–∏!"
        style={{
          width: '100%',
          minHeight: '400px',
          background: '#0a0a0a',
          color: '#e0e0e0',
          border: '1px solid #333',
          borderRadius: '6px',
          padding: '12px',
          fontSize: '14px',
          fontFamily: 'monospace',
          resize: 'vertical',
          lineHeight: '1.5'
        }}
      />
      <div style={{ 
        marginTop: '10px', 
        fontSize: '12px', 
        color: '#666',
        display: 'flex',
        gap: '20px'
      }}>
        <span>üìç –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: {cursorPosition}</span>
        <span>üìù –í—ã–¥–µ–ª–µ–Ω–∏–µ: {selectionEnd}</span>
        <span>üìú –°–∫—Ä–æ–ª–ª: {scrollTop}px</span>
        <span>üîÑ –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {isFirstInteraction ? '–î–∞' : '–ù–µ—Ç'}</span>
      </div>
      
      <div style={{ 
        marginTop: '10px', 
        padding: '10px',
        background: '#1a1a1a',
        borderRadius: '6px',
        fontSize: '12px',
        color: '#888'
      }}>
        <strong>üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</strong>
        <ul style={{ margin: '5px 0', paddingLeft: '20px' }}>
          <li>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞</li>
          <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ requestAnimationFrame –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–∏–Ω–≥–∞</li>
          <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ onClick –≤–º–µ—Å—Ç–µ —Å onFocus –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</li>
          <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –Ω–µ —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å–æ—Ä–∞</li>
          <li>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä—ã–∂–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter</li>
        </ul>
      </div>
    </div>
  );
};

export default FixedCursorTextarea;