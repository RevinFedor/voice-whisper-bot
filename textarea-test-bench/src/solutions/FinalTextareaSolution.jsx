import React, { useRef, useLayoutEffect, useState, useCallback } from 'react';

/**
 * –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –¥–ª—è textarea —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –∏ –∫—É—Ä—Å–æ—Ä–∞
 * –†–µ—à–∞–µ—Ç –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
 * - –°–±—Ä–æ—Å —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
 * - –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ 0 –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
 * - –ü—Ä—ã–∂–æ–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
 * - –†–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ (5000+ —Å–∏–º–≤–æ–ª–æ–≤)
 */
const FinalTextareaSolution = ({ value, onChange, placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..." }) => {
  const textAreaRef = useRef(null);
  const [cursor, setCursor] = useState(0);
  const [scrollTop, setScrollTop] = useState(0);
  const [isFirstInteraction, setIsFirstInteraction] = useState(true);
  const [isRestoringScroll, setIsRestoringScroll] = useState(false);
  const isLargeText = value?.length > 5000;

  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
  useLayoutEffect(() => {
    const textArea = textAreaRef.current;
    
    // –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (textArea && !isFirstInteraction && !isRestoringScroll) {
      const scrollDiff = Math.abs(textArea.scrollTop - scrollTop);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è
      if (scrollDiff > 10) {
        console.log('üìê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏');
        setIsRestoringScroll(true);
        
        textArea.setSelectionRange(cursor, cursor);
        textArea.scrollTop = scrollTop;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
          setIsRestoringScroll(false);
        });
      }
    }
  }, [value, cursor, scrollTop, isFirstInteraction, isRestoringScroll]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleChange = useCallback((e) => {
    const { selectionStart, scrollTop: currentScroll, value: newValue } = e.target;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setCursor(selectionStart);
    setScrollTop(currentScroll);
    
    // –í—ã–∑—ã–≤–∞–µ–º onChange
    onChange && onChange(newValue);
  }, [onChange]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ - —Ñ–∏–∫—Å –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ 0
  const handleClick = useCallback((e) => {
    if (isFirstInteraction) {
      console.log('üéØ –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
      requestAnimationFrame(() => {
        const realPosition = e.target.selectionStart;
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ RAF:', realPosition);
        if (realPosition >= 0) {
          e.target.setSelectionRange(realPosition, realPosition);
          setCursor(realPosition);
          setScrollTop(e.target.scrollTop);
        }
      });
      setIsFirstInteraction(false);
    } else {
      setCursor(e.target.selectionStart);
      setScrollTop(e.target.scrollTop);
    }
  }, [isFirstInteraction]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞
  const handleFocus = useCallback((e) => {
    if (isFirstInteraction) {
      setTimeout(() => {
        const currentPos = e.target.selectionStart;
        setCursor(currentPos);
        setScrollTop(e.target.scrollTop);
        setIsFirstInteraction(false);
      }, 0);
    }
  }, [isFirstInteraction]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
  const handleScroll = useCallback((e) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    if (!isRestoringScroll) {
      setScrollTop(e.target.scrollTop);
    }
  }, [isRestoringScroll]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleSelect = useCallback((e) => {
    setCursor(e.target.selectionStart);
  }, []);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä—ã–∂–∫–æ–≤
  const handleKeyDown = useCallback((e) => {
    if (e.key === 'Enter') {
      e.preventDefault(); // –í–°–ï–ì–î–ê –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –±—Ä–∞—É–∑–µ—Ä–∞
      
      const pos = e.target.selectionStart;
      const currentScrollTop = e.target.scrollTop;
      const newValue = value.slice(0, pos) + '\n' + value.slice(pos);
      
      if (isFirstInteraction) {
        setIsFirstInteraction(false);
      }
      
      onChange && onChange(newValue);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ –±—Ä–∞—É–∑–µ—Ä–∞
      requestAnimationFrame(() => {
        e.target.setSelectionRange(pos + 1, pos + 1);
        e.target.scrollTop = currentScrollTop; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ç –∂–µ —Å–∫—Ä–æ–ª–ª
        setCursor(pos + 1);
        setScrollTop(currentScrollTop);
      });
    }
  }, [value, onChange, isFirstInteraction]);

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
  const textareaProps = isLargeText ? {
    spellCheck: false,
    autoComplete: 'off',
    autoCorrect: 'off',
    autoCapitalize: 'off'
  } : {};

  return (
    <textarea
      ref={textAreaRef}
      value={value}
      onChange={handleChange}
      onClick={handleClick}
      onFocus={handleFocus}
      onScroll={handleScroll}
      onSelect={handleSelect}
      onKeyDown={handleKeyDown}
      placeholder={placeholder}
      {...textareaProps}
      style={{
        width: '100%',
        minHeight: '400px',
        padding: '12px',
        fontSize: '14px',
        fontFamily: 'inherit',
        resize: 'vertical',
        // GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
        ...(isLargeText && {
          willChange: 'transform',
          transform: 'translateZ(0)'
        })
      }}
    />
  );
};

export default FinalTextareaSolution;

// –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const useScrollPreservingTextarea = (initialValue = '') => {
  const [value, setValue] = useState(initialValue);
  
  return {
    value,
    setValue,
    textareaProps: {
      value,
      onChange: setValue
    },
    TextareaComponent: (props) => (
      <FinalTextareaSolution 
        value={value} 
        onChange={setValue} 
        {...props} 
      />
    )
  };
};