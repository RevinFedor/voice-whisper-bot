import React, { useRef, useLayoutEffect, useMemo, useCallback } from 'react';

// –†–ï–®–ï–ù–ò–ï 4: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ (5000+ —Å–∏–º–≤–æ–ª–æ–≤)
const OptimizedLargeText = ({ value, onChange, debounceMs = 100 }) => {
  const textAreaRef = useRef(null);
  const stateRef = useRef({
    cursor: 0,
    scrollTop: 0,
    lastValue: '',
    updateTimeout: null,
    isLargeText: false
  });

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const memoizedValue = useMemo(() => value, [value]);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–∏–º
  const isLargeText = memoizedValue.length > 5000;

  useLayoutEffect(() => {
    const textArea = textAreaRef.current;
    const state = stateRef.current;
    
    if (!textArea || state.lastValue === memoizedValue) return;
    
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (${memoizedValue.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    
    // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    if (isLargeText) {
      console.log('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
      requestAnimationFrame(() => {
        textArea.setSelectionRange(state.cursor, state.cursor);
        textArea.scrollTop = state.scrollTop;
      });
    } else {
      // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–∞–∑—É
      textArea.setSelectionRange(state.cursor, state.cursor);
      textArea.scrollTop = state.scrollTop;
    }
    
    state.lastValue = memoizedValue;
    state.isLargeText = isLargeText;
  }, [memoizedValue, isLargeText]);

  const handleChange = useCallback((e) => {
    const { selectionStart, scrollTop, value: newValue } = e.target;
    const state = stateRef.current;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.cursor = selectionStart;
    state.scrollTop = scrollTop;
    
    // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º debounce
    if (newValue.length > 5000 && debounceMs > 0) {
      console.log('‚è±Ô∏è Debouncing –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
      
      if (state.updateTimeout) {
        clearTimeout(state.updateTimeout);
      }
      
      // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      if (textAreaRef.current) {
        textAreaRef.current.value = newValue;
      }
      
      state.updateTimeout = setTimeout(() => {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ debounce');
        onChange && onChange(newValue);
      }, debounceMs);
    } else {
      // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
      onChange && onChange(newValue);
    }
  }, [onChange, debounceMs]);

  const handleScroll = useCallback((e) => {
    stateRef.current.scrollTop = e.target.scrollTop;
  }, []);

  const handleSelect = useCallback((e) => {
    stateRef.current.cursor = e.target.selectionStart;
  }, []);

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
  const textareaProps = isLargeText ? {
    spellCheck: false,
    autoComplete: 'off',
    autoCorrect: 'off',
    autoCapitalize: 'off'
  } : {};

  return (
    <div>
      <textarea
        ref={textAreaRef}
        defaultValue={memoizedValue}
        onChange={handleChange}
        onScroll={handleScroll}
        onSelect={handleSelect}
        placeholder="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ (5000+ —Å–∏–º–≤–æ–ª–æ–≤)"
        {...textareaProps}
        style={{
          width: '100%',
          minHeight: '400px',
          background: '#0a0a0a',
          color: '#e0e0e0',
          border: isLargeText ? '1px solid #f59e0b' : '1px solid #333',
          borderRadius: '6px',
          padding: '12px',
          fontSize: '14px',
          fontFamily: 'monospace',
          resize: 'vertical',
          lineHeight: '1.5',
          // GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
          willChange: isLargeText ? 'transform' : 'auto',
          transform: 'translateZ(0)'
        }}
      />
      <div style={{ marginTop: '10px', fontSize: '12px', color: '#666' }}>
        {isLargeText ? (
          <span style={{ color: '#f59e0b' }}>
            ‚ö° –†–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–µ–Ω: debounce {debounceMs}ms, requestAnimationFrame, spell check –æ—Ç–∫–ª—é—á–µ–Ω
          </span>
        ) : (
          <span>üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤)</span>
        )}
      </div>
      <div style={{ marginTop: '5px', fontSize: '12px', color: '#666' }}>
        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {isLargeText ? '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤' : '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å'}
      </div>
    </div>
  );
};

export default OptimizedLargeText;