import { Telegraf } from 'telegraf';
import fetch from 'node-fetch';
import { OpenAI } from 'openai';
import { v4 as uuid } from 'uuid';
import { writeFile, mkdir, unlink } from 'fs/promises';
import { createReadStream } from 'fs';
import path from 'path';
import os from 'os';

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
const TMP_DIR = path.join(os.tmpdir(), 'voice-whisper-bot');

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ OpenAI –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
let bot = null;
let openai = null;

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function ensureTempDir() {
    try {
        await mkdir(TMP_DIR, { recursive: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞
function initialize() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    if (!bot) {
        bot = new Telegraf(process.env.TELEGRAM_TOKEN);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.on('voice', async (ctx) => {
            try {
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                const user = ctx.message.from;
                const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
                console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} (ID: ${user.id})`);

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
                const loadingMessage = await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');

                const fileId = ctx.message.voice.file_id;
                const link = await ctx.telegram.getFileLink(fileId);

                // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                const res = await fetch(link.href);
                const buffer = await res.arrayBuffer();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                await ensureTempDir();
                const tmpPath = path.join(TMP_DIR, `${uuid()}.ogg`);
                await writeFile(tmpPath, Buffer.from(buffer));

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
                const transcript = await openai.audio.transcriptions.create({
                    model: 'whisper-1',
                    file: createReadStream(tmpPath),
                    response_format: 'text',
                    language: 'ru',
                });

                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try {
                    await unlink(tmpPath);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', e);
                }

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await ctx.telegram.deleteMessage(ctx.chat.id, loadingMessage.message_id);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await ctx.reply(`üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n${transcript}`);

                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username}, –¥–ª–∏–Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.on('text', (ctx) => {
            const user = ctx.message.from;
            const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`.trim();
            console.log(`üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username}: ${ctx.message.text}`);

            ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.');
        });
    }

    if (!openai) {
        openai = new OpenAI({ apiKey: process.env.OPENAI_KEY });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Vercel
export default async function (req, res) {
    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
        if (req.method === 'GET') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
            const tempBot = new Telegraf(process.env.TELEGRAM_TOKEN);

            const webhookUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}/api/webhook` : null;

            if (webhookUrl) {
                try {
                    await tempBot.telegram.setWebhook(webhookUrl);
                    console.log(`ü§ñ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${webhookUrl}`);
                } catch (e) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', e);
                }
            }

            return res.status(200).json({
                ok: true,
                message: '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
                webhookUrl: webhookUrl || '–ù–µ—Ç URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞',
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (req.method === 'POST' && req.body) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ OpenAI —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞
            initialize();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ webhook –æ—Ç Telegram
            if (req.body.update_id) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                await bot.handleUpdate(req.body);
            }

            return res.status(200).json({ ok: true });
        }

        return res.status(404).json({ ok: false, message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return res.status(500).json({ ok: false, error: error.message });
    }
}
