import { Injectable } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { ObsidianService } from '../obsidian/obsidian.service';
import OpenAI from 'openai';

@Injectable()
export class AiTagsService {
  private openai: OpenAI;

  constructor(
    private prisma: PrismaService,
    private obsidianService: ObsidianService,
  ) {
    if (!process.env.OPENAI_KEY) throw new Error('OPENAI_KEY is required in environment variables');
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_KEY,
    });
  }

  async generateTags(noteId: string, customPrompt?: string) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if (customPrompt) {
      console.log('üéØ [Tags] –ö–∞—Å—Ç–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è');
      console.log('   üìù –ü—Ä–æ–º–ø—Ç:', customPrompt);
    } else {
      console.log('ü§ñ [Tags] Default –≥–µ–Ω–µ—Ä–∞—Ü–∏—è');
    }
    
    // Get note details
    const note = await this.prisma.note.findUnique({
      where: { id: noteId },
    });

    if (!note) {
      throw new Error('Note not found');
    }

    // Get available tags from Obsidian
    const availableTags = await this.obsidianService.getAllTags();
    console.log(`   üìö –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ–≥–æ–≤ –≤ Obsidian: ${availableTags.length}`);

    // Build the prompt
    const defaultPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–≥–∏.
–£—á–∏—Ç—ã–≤–∞–π:
- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: ${availableTags.length > 0 ? availableTags.join(', ') : '–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤'}
- –¢–µ–º–∞—Ç–∏–∫—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
- –ü—Ä–µ–¥–ª–æ–∂–∏ 5-7 —Ç–µ–≥–æ–≤
- –°–º–µ—à–∞–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
- –ù–ï –¥–æ–±–∞–≤–ª—è–π # –ø–µ—Ä–µ–¥ —Ç–µ–≥–∞–º–∏
- –ï—Å–ª–∏ —Ç–µ–≥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: web_development)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
{
  "existing": ["—Ç–µ–≥1", "—Ç–µ–≥2"], // —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –¢–û–ß–ù–û –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
  "new": ["–Ω–æ–≤—ã–π_—Ç–µ–≥1", "–Ω–æ–≤—ã–π_—Ç–µ–≥2"] // –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
}`;

    let fullPrompt = defaultPrompt;
    if (customPrompt) {
      fullPrompt += `\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${customPrompt}`;
    }

    const noteContent = `
–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${note.title}
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${note.content || '–ü—É—Å—Ç–æ'}
–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏: ${note.tags?.length > 0 ? note.tags.join(', ') : '–Ω–µ—Ç'}
`;

    try {
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: fullPrompt,
          },
          {
            role: 'user',
            content: noteContent,
          },
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' },
      });

      const response = completion.choices[0].message.content;
      const result = JSON.parse(response);

      // Ensure arrays exist
      const existingTags = result.existing || [];
      const newTags = result.new || [];
      const allTags = [...existingTags, ...newTags];
      
      // –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log(`   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–≥–æ–≤: ${allTags.length}`);
      if (existingTags.length > 0) {
        console.log(`   üìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: ${existingTags.map(t => `#${t}`).join(', ')}`);
      }
      if (newTags.length > 0) {
        console.log(`   üÜï –ù–æ–≤—ã–µ: ${newTags.map(t => `#${t}`).join(', ')}`);
      }

      // Save to history only if custom prompt was provided
      if (customPrompt) {
        await this.prisma.tagHistory.create({
          data: {
            noteId,
            tags: allTags,
            existingTags,
            newTags,
            prompt: customPrompt,
            model: 'gpt-4o-mini',
          },
        });
        console.log('   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫–µ (–ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑)
      const aiSuggestions = allTags.map(tag => ({
        text: tag.startsWith('#') ? tag : `#${tag}`,
        isNew: newTags.includes(tag),
      }));
      
      await this.prisma.note.update({
        where: { id: noteId },
        data: { aiSuggestedTags: aiSuggestions },
      });
      
      console.log('   üìå AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞–º–µ—Ç–∫–µ');

      return {
        tags: aiSuggestions,
        existingTags,
        newTags,
      };
    } catch (error) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤:', error.message);
      throw new Error('Failed to generate tags');
    }
  }

  async getHistory(noteId: string) {
    const history = await this.prisma.tagHistory.findMany({
      where: { noteId },
      orderBy: { createdAt: 'desc' },
    });
    
    console.log(`üìú [Tags] –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: ${history.length} –∑–∞–ø–∏—Å–µ–π`);

    return history.map(item => ({
      id: item.id,
      tags: item.tags.map(tag => ({
        text: tag.startsWith('#') ? tag : `#${tag}`,
        isNew: item.newTags.includes(tag),
      })),
      existingTags: item.existingTags,
      newTags: item.newTags,
      prompt: item.prompt,
      createdAt: item.createdAt,
    }));
  }

  async clearHistory(noteId: string) {
    const result = await this.prisma.tagHistory.deleteMany({
      where: { noteId },
    });
    
    console.log(`üóëÔ∏è [Tags] –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${result.count} –∑–∞–ø–∏—Å–µ–π`);

    return { success: true };
  }

  async updateNoteTags(noteId: string, tags: string[]) {
    // Remove # from tags before saving
    const cleanTags = tags.map(tag => tag.replace(/^#/, ''));
    
    console.log('üìù [Tags] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∑–∞–º–µ—Ç–∫–∏');
    console.log(`   üè∑Ô∏è –¢–µ–≥–∏: ${cleanTags.map(t => `#${t}`).join(', ')}`);
    console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${cleanTags.length}`);

    await this.prisma.note.update({
      where: { id: noteId },
      data: { tags: cleanTags },
    });

    return { success: true, tags: cleanTags };
  }

  async getObsidianTags() {
    const tags = await this.obsidianService.getAllTags();
    console.log(`üè∑Ô∏è [Tags] –ó–∞–ø—Ä–æ—Å —Ç–µ–≥–æ–≤ Obsidian: –Ω–∞–π–¥–µ–Ω–æ ${tags.length}`);
    return tags.map(tag => tag.startsWith('#') ? tag : `#${tag}`);
  }
  
  async updateAiSuggestions(noteId: string, aiSuggestions: any[]) {
    console.log('üìå [Tags] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');
    console.log(`   üìä –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${aiSuggestions.length}`);
    
    await this.prisma.note.update({
      where: { id: noteId },
      data: { aiSuggestedTags: aiSuggestions },
    });
    
    return { success: true };
  }
}