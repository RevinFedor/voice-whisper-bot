generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Note {
  id              String   @id @default(uuid())
  
  // User id - now just a string identifier (not a relation)
  userId          String   @default("local")
  
  // Content
  title           String
  content         String?
  type            NoteType
  
  // Position data (for tldraw)
  date            DateTime @db.Timestamp
  x               Float    // Actual position in tldraw
  y               Float    // Actual position in tldraw
  manuallyPositioned Boolean @default(false) // Flag if user dragged the note
  
  // Telegram metadata
  telegramMessageId BigInt?
  telegramChatId    BigInt?
  
  // Status
  isArchived      Boolean  @default(false)
  isPinned        Boolean  @default(false)
  tags            String[]
  
  // AI suggestions (сохраняем между сессиями)
  aiSuggestedTags Json?    // Массив объектов {text: string, isNew: boolean}
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  titleHistory    TitleHistory[]
  tagHistory      TagHistory[]
  
  @@index([userId, date])
  @@index([date])
  @@index([isArchived])
}

model TitleHistory {
  id              String   @id @default(uuid())
  
  // Note relation
  noteId          String
  note            Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  
  // Title data
  title           String
  type            TitleType @default(manual) // manual or ai
  
  // AI generation metadata (optional)
  prompt          String?  // User's custom prompt if provided
  model           String?  // AI model used (e.g., "gpt-4")
  
  // Timestamps
  createdAt       DateTime @default(now())
  
  @@index([noteId])
  @@index([createdAt])
}

enum NoteType {
  voice
  text
  collection
}

enum TitleType {
  manual
  ai
}

model TagHistory {
  id              String   @id @default(uuid())
  
  // Note relation
  noteId          String
  note            Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  
  // Tags data
  tags            String[]  // Array of generated tags
  existingTags    String[]  // Tags that already exist in Obsidian
  newTags         String[]  // New tags suggested by AI
  
  // Generation metadata
  prompt          String?   // User's custom prompt if provided (null for default)
  model           String?   // AI model used (e.g., "gpt-4o-mini")
  
  // Timestamps
  createdAt       DateTime @default(now())
  
  @@index([noteId])
  @@index([createdAt])
}