import React, { createContext, useContext, useState, useCallback, useEffect, useRef } from 'react';

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –º–æ–¥–∞–ª–æ–∫
export const MODAL_PRIORITIES = {
  // –í–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏)
  DROPDOWN: 1000,
  AUTOCOMPLETE: 900,
  EXPANDED_INPUT: 800,     // –†–∞—Å–∫—Ä—ã—Ç—ã–π textarea –∑–∞–≥–æ–ª–æ–≤–∫–∞
  TAG_INPUT: 700,          // Input –¥–ª—è —Ç–µ–≥–æ–≤
  PROMPT_PANEL: 600,       // AI –ø–∞–Ω–µ–ª–∏ (–∏—Å—Ç–æ—Ä–∏—è, —á–∞—Ç)
  TAG_PANELS: 500,         // –ü–∞–Ω–µ–ª–∏ —Ç–µ–≥–æ–≤ (–∏—Å—Ç–æ—Ä–∏—è, Obsidian —Ç–µ–≥–∏)
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–∞–ª–∫–∏ (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)
  NOTE_MODAL: 100,         // NoteModal
  DATE_PICKER: 100,        // DatePickerModal
  
  // –§–æ–Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  BACKDROP: 10
};

// –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –≥—Ä—É–ø–ø –º–æ–¥–∞–ª–æ–∫
export const MODAL_GROUPS = {
  // –í–°–ï –ø–∞–Ω–µ–ª–∏ (AI —á–∞—Ç—ã, –∏—Å—Ç–æ—Ä–∏–∏, —Ç–µ–≥–∏) - –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ
  PANELS_GROUP: {
    mode: 'exclusive',
    modals: ['title-ai-chat', 'title-history', 'tag-ai-chat', 'tag-history', 'obsidian-tags']
  },
  
  // –ò–Ω–ø—É—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã —Å –¥—Ä—É–≥–∏–º–∏)
  INPUT_GROUP: {
    mode: 'parallel',
    modals: ['expanded-title', 'tag-input']
  }
};

const ModalStackContext = createContext(null);

export function ModalStackProvider({ children }) {
  const [modalStack, setModalStack] = useState([]);
  const escapeHandlerRef = useRef(null);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–∞–ª–∫–∏ –≤ —Å—Ç–µ–∫–µ
  const registerModal = useCallback((modalId, priority = 0, escapeHandler, options = {}) => {
    console.log(`üìå Registering modal: ${modalId} with priority: ${priority}`);
    
    setModalStack(prev => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –º–æ–¥–∞–ª–∫–∏
      const { group, exclusive = false } = options;
      let newStack = [...prev];
      
      // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏–∑ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø—ã
      if (group && exclusive) {
        const groupConfig = Object.values(MODAL_GROUPS).find(g => 
          g.modals.includes(modalId.split('-').slice(-2).join('-'))
        );
        
        if (groupConfig && groupConfig.mode === 'exclusive') {
          // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥–∞–ª–∫–∏ –∏–∑ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø—ã
          newStack = newStack.filter(m => {
            const modalType = m.modalId.split('-').slice(-2).join('-');
            const isInSameGroup = groupConfig.modals.includes(modalType);
            if (isInSameGroup && m.modalId !== modalId) {
              console.log(`üîÑ Auto-closing modal from same group: ${m.modalId}`);
              // –í—ã–∑—ã–≤–∞–µ–º –∏—Ö escape handler –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
              if (m.escapeHandler) {
                setTimeout(() => m.escapeHandler(), 0);
              }
              return false;
            }
            return true;
          });
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–∞–ª–∫—É
      newStack.push({ modalId, priority, escapeHandler, options });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –ø–µ—Ä–≤—ã–º –≤ –º–∞—Å—Å–∏–≤–µ)
      newStack.sort((a, b) => b.priority - a.priority);
      
      console.log(`üìö Modal stack updated:`, newStack.map(m => `${m.modalId}(${m.priority})`));
      return newStack;
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    return () => unregisterModal(modalId);
  }, []);
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª–∫–∏ –∏–∑ —Å—Ç–µ–∫–∞
  const unregisterModal = useCallback((modalId) => {
    console.log(`üì§ Unregistering modal: ${modalId}`);
    setModalStack(prev => {
      const newStack = prev.filter(m => m.modalId !== modalId);
      console.log(`üìö Modal stack after unregister:`, newStack.map(m => `${m.modalId}(${m.priority})`));
      return newStack;
    });
  }, []);
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Escape
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape' && modalStack.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–æ–≤—É—é –º–æ–¥–∞–ª–∫—É (—Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        const topModal = modalStack[0];
        console.log(`‚å®Ô∏è Escape pressed, top modal: ${topModal.modalId}`);
        
        // –í—ã–∑—ã–≤–∞–µ–º –µ—ë –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if (topModal.escapeHandler) {
          const handled = topModal.escapeHandler();
          if (handled) {
            e.preventDefault();
            e.stopPropagation();
            console.log(`‚úÖ Escape handled by: ${topModal.modalId}`);
          } else {
            console.log(`‚è≠Ô∏è Escape not handled by: ${topModal.modalId}, passing to next`);
          }
        }
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    escapeHandlerRef.current = handleEscape;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º capture: true –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ bubbling
    document.addEventListener('keydown', handleEscape, { capture: true });
    
    return () => {
      document.removeEventListener('keydown', handleEscape, { capture: true });
    };
  }, [modalStack]);
  
  // Debug helpers
  const debugStack = useCallback(() => {
    console.log('üîç Current Modal Stack:');
    modalStack.forEach((modal, index) => {
      console.log(`  ${index + 1}. ${modal.modalId} (priority: ${modal.priority})`);
    });
    if (modalStack.length === 0) {
      console.log('  (empty)');
    }
  }, [modalStack]);
  
  const value = {
    registerModal,
    unregisterModal,
    modalStack,
    debugStack
  };
  
  return (
    <ModalStackContext.Provider value={value}>
      {children}
    </ModalStackContext.Provider>
  );
}

// Hook –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export function useModalEscape(modalId, escapeHandler, priority = 0, options = {}) {
  const context = useContext(ModalStackContext);
  
  if (!context) {
    console.warn(`‚ö†Ô∏è useModalEscape called outside ModalStackProvider for: ${modalId}`);
    return;
  }
  
  const { registerModal } = context;
  
  useEffect(() => {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª—å—à–µ 0
    if (escapeHandler && priority > 0) {
      const unregister = registerModal(modalId, priority, escapeHandler, options);
      return unregister;
    }
  }, [modalId, priority, escapeHandler, registerModal, options]);
}

// Hook –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
export function useModalStack() {
  const context = useContext(ModalStackContext);
  if (!context) {
    throw new Error('useModalStack must be used within ModalStackProvider');
  }
  return context;
}

// Debug command –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
  window.debugModalStack = () => {
    console.log('üîç Modal Stack Debug:');
    console.log('  Use within a component with useModalStack hook');
    console.log('  Example: const { debugStack } = useModalStack(); debugStack();');
  };
}