import React, { useEffect } from 'react';
import { Tldraw, createShapeId, useEditor } from 'tldraw';
import 'tldraw/tldraw.css';
import { CustomNoteShapeUtil } from './components/CustomNoteShape';

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function DebugInfo() {
    const editor = useEditor();
    
    useEffect(() => {
        if (!editor) return;
        
        const checkCanvas = () => {
            console.group('üîç CANVAS DEBUG');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º shapes –≤ store
            const shapes = editor.getCurrentPageShapes();
            console.log('Shapes in store:', shapes.length);
            shapes.forEach(shape => {
                console.log(`- ${shape.type} at (${shape.x}, ${shape.y})`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç—ã
            const canvas = document.querySelector('.tl-canvas');
            console.log('Canvas element:', !!canvas);
            
            const shapesContainer = document.querySelector('.tl-shapes');
            console.log('Shapes container:', !!shapesContainer);
            
            if (shapesContainer) {
                const shapeElements = shapesContainer.querySelectorAll('.tl-shape');
                console.log('Shape DOM elements:', shapeElements.length);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º viewport
            const viewport = editor.getViewportScreenBounds();
            console.log('Viewport:', viewport);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–µ—Ä—É
            const camera = editor.getCamera();
            console.log('Camera:', camera);
            
            console.groupEnd();
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        const interval = setInterval(checkCanvas, 2000);
        
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(checkCanvas, 1000);
        
        return () => clearInterval(interval);
    }, [editor]);
    
    return null;
}

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export default function DebugApp() {
    const handleMount = (editor) => {
        console.log('üöÄ DebugApp: Editor mounted');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ shapes –¥–ª—è —Ç–µ—Å—Ç–∞
        setTimeout(() => {
            console.log('üì¶ Creating test shapes...');
            
            // 1. –ü—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            const geoId = createShapeId();
            editor.createShape({
                id: geoId,
                type: 'geo',
                x: 100,
                y: 100,
                props: {
                    geo: 'rectangle',
                    w: 200,
                    h: 100,
                    color: 'red',
                    fill: 'solid',
                }
            });
            console.log('Created geo shape');
            
            // 2. –ö–∞—Å—Ç–æ–º–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞
            const noteId = createShapeId();
            editor.createShape({
                id: noteId,
                type: 'custom-note',
                x: 350,
                y: 100,
                props: {
                    w: 180,
                    h: 150,
                    richText: {
                        type: 'doc',
                        content: [{
                            type: 'paragraph',
                            content: [{
                                type: 'text',
                                text: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞'
                            }]
                        }]
                    },
                    noteType: 'text',
                    time: '12:00'
                }
            });
            console.log('Created custom note');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            const shapes = editor.getCurrentPageShapes();
            console.log('Total shapes:', shapes.length);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
            editor.resetZoom();
            editor.setCamera({ x: 0, y: 0, z: 1 });
            
        }, 500);
    };
    
    return (
        <div style={{ 
            position: 'fixed', 
            inset: 0,
            width: '100vw',
            height: '100vh',
            background: '#fff'
        }}>
            <Tldraw
                shapeUtils={[CustomNoteShapeUtil]}
                onMount={handleMount}
            >
                <DebugInfo />
            </Tldraw>
            
            {/* Debug –ø–∞–Ω–µ–ª—å */}
            <div style={{
                position: 'fixed',
                top: 10,
                left: 10,
                background: 'rgba(0,0,0,0.8)',
                color: 'white',
                padding: '10px',
                borderRadius: '5px',
                fontSize: '12px',
                fontFamily: 'monospace',
                zIndex: 10000,
                maxWidth: '300px'
            }}>
                <div>üîç DEBUG MODE</div>
                <div>–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫</div>
                <div>–ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏</div>
                <div>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UI –≤–∫–ª—é—á–µ–Ω</div>
            </div>
        </div>
    );
}