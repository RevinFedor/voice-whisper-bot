import React from 'react';
import { TldrawEditor, createShapeId, TldrawUi, DefaultCanvas, defaultShapeUtils, defaultTools } from 'tldraw';
import 'tldraw/tldraw.css';
import './custom-tldraw-fixed.css';
import { CustomNoteShapeUtil } from './components/CustomNoteShape';
import { CustomControls } from './components/CustomControls';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ richText —Ñ–æ—Ä–º–∞—Ç
function toRichText(text) {
    const lines = text.split('\n');
    const content = lines.map((line) => {
        if (!line) {
            return { type: 'paragraph' };
        }
        return {
            type: 'paragraph',
            content: [{ type: 'text', text: line }],
        };
    });
    return { type: 'doc', content };
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π
export default function WorkingCustomApp() {
    const handleMount = (editor) => {
        console.log('üöÄ WorkingCustomApp: Editor mounted');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            console.log('üìù Creating custom notes...');
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            const notes = [
                { 
                    x: 100, 
                    y: 110, 
                    title: '–£—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏', 
                    content: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å...', 
                    noteType: 'voice', 
                    time: '08:30', 
                    duration: '1:45' 
                },
                { 
                    x: 100, 
                    y: 300, 
                    title: 'TODO —Å–ø–∏—Å–æ–∫', 
                    content: '- –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É', 
                    noteType: 'text', 
                    time: '09:15' 
                },
                { 
                    x: 350, 
                    y: 110, 
                    title: '–ù–∞—á–∞–ª–æ –¥–Ω—è', 
                    content: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á...', 
                    noteType: 'voice', 
                    time: '10:00', 
                    duration: '1:20' 
                },
                { 
                    x: 600, 
                    y: 110, 
                    title: '–ò–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞', 
                    content: '–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...', 
                    noteType: 'voice', 
                    time: '09:15', 
                    duration: '2:14' 
                },
            ];
            
            notes.forEach((note) => {
                const id = createShapeId();
                try {
                    editor.createShape({
                        id,
                        type: 'custom-note',
                        x: note.x,
                        y: note.y,
                        props: {
                            w: 180,
                            h: 150,
                            richText: toRichText(note.title + '\n' + note.content),
                            noteType: note.noteType,
                            time: note.time,
                            duration: note.duration || '',
                        },
                    });
                    console.log(`‚úÖ Created ${note.noteType} note: ${note.title}`);
                } catch (error) {
                    console.error(`‚ùå Failed to create note: ${note.title}`, error);
                }
            });
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã
            const dates = [
                { date: '07', month: '–ê–í–ì', x: 100, y: 50 },
                { date: '08', month: '–ê–í–ì', x: 350, y: 50 },
                { date: '09', month: '–ê–í–ì', x: 600, y: 50, isToday: true },
            ];
            
            dates.forEach((dateInfo) => {
                const id = createShapeId();
                editor.createShape({
                    id,
                    type: 'text',
                    x: dateInfo.x,
                    y: dateInfo.y,
                    props: {
                        richText: toRichText(`${dateInfo.date}\n${dateInfo.month}`),
                        color: dateInfo.isToday ? 'green' : 'grey',
                        size: 'l',
                        font: 'sans',
                        autoSize: true,
                        w: 100,
                    },
                });
                console.log(`‚úÖ Created date label: ${dateInfo.date}`);
            });
            
            console.log('üìä Total shapes:', editor.getCurrentPageShapes().length);
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É
            editor.zoomToFit();
            editor.setCamera({ x: 0, y: 0, z: 1 });
            
        }, 1000);
    };
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—É–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–Ω–µ–ª–∏)
    const components = {
        Toolbar: null,
        HelpMenu: null,
        ZoomMenu: null,
        MainMenu: null,
        Minimap: null,
        StylePanel: null,
        PageMenu: null,
        NavigationPanel: null,
        ContextMenu: null,
        ActionsMenu: null,
        QuickActions: null,
        HelperButtons: null,
        DebugPanel: null,
        DebugMenu: null,
        SharePanel: null,
        MenuPanel: null,
    };
    
    return (
        <div style={{ position: 'fixed', inset: 0, background: '#0a0a0a' }}>
            <TldrawEditor
                shapeUtils={[...defaultShapeUtils, CustomNoteShapeUtil]}
                tools={defaultTools}
                onMount={handleMount}
            >
                <TldrawUi 
                    hideUi={false}
                    components={components}
                >
                    <DefaultCanvas />
                    <CustomControls />
                </TldrawUi>
            </TldrawEditor>
        </div>
    );
}