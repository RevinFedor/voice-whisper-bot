import React from 'react';
import ReactDOM from 'react-dom';
import { useEditor, useValue } from '@tldraw/editor';

export function SelectionContextMenu() {
    const editor = useEditor();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ custom-note –∑–∞–º–µ—Ç–∫–∏
    const selectedNotes = useValue(
        'selected notes',
        () => {
            const shapes = editor.getSelectedShapes();
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ custom-note shapes
            return shapes.filter(shape => shape.type === 'custom-note');
        },
        [editor]
    );
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã (—Å–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏)
    const cameraState = useValue(
        'camera state',
        () => editor.getCameraState(),
        [editor]
    );
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
    const menuPosition = useValue(
        'menu position',
        () => {
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
            if (selectedNotes.length === 0) return null;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã (–∫–∞–∫ –≤ Miro)
            if (cameraState !== 'idle') return null;
            
            // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ —ç–∫—Ä–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            const screenBounds = editor.getSelectionRotatedScreenBounds();
            if (!screenBounds) return null;
            
            // –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            const zoom = editor.getZoomLevel();
            
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Ç—Å—Ç—É–ø: –±–æ–ª—å—à–µ –ø—Ä–∏ –æ—Ç–¥–∞–ª–µ–Ω–∏–∏, –º–µ–Ω—å—à–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
            // –ü—Ä–∏ zoom 0.5 (–æ—Ç–¥–∞–ª–µ–Ω–æ) ‚Üí –æ—Ç—Å—Ç—É–ø 120px
            // –ü—Ä–∏ zoom 1 (–Ω–æ—Ä–º–∞–ª—å–Ω–æ) ‚Üí –æ—Ç—Å—Ç—É–ø 60px
            // –ü—Ä–∏ zoom 2 (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–æ) ‚Üí –æ—Ç—Å—Ç—É–ø 30px
            const baseOffset = 60;
            const dynamicOffset = baseOffset / Math.max(zoom, 0.5);
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é –ø–æ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–¥ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
            return {
                x: screenBounds.x + screenBounds.width / 2,
                y: screenBounds.y - dynamicOffset,
            };
        },
        [selectedNotes, editor, cameraState]
    );
    
    // –ù–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –∑–∞–º–µ—Ç–æ–∫
    if (!menuPosition || selectedNotes.length === 0) return null;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const handleDelete = () => {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫:');
        const ids = selectedNotes.map(note => note.id);
        editor.deleteShapes(ids);
    };
    
    const handleExportToObsidian = () => {
        console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Obsidian:');
        selectedNotes.forEach((note, index) => {
            const dbId = note.props?.dbId || 'No DB ID';
            const title = note.props?.richText?.content?.[0]?.content?.[0]?.text || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
            console.log(`  ${index + 1}. ${title} (${dbId})`);
        });
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ Obsidian
    };
    
    const handleDuplicate = () => {
        console.log('üìã –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫');
        const ids = selectedNotes.map(note => note.id);
        editor.duplicateShapes(ids, { x: 20, y: 20 }); // –°–º–µ—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    };
    
    const handleLogIds = () => {
        console.log('üÜî Selected Note IDs:');
        console.log('='.repeat(40));
        
        selectedNotes.forEach((note, index) => {
            const dbId = note.props?.dbId || 'No DB ID';
            const title = note.props?.richText?.content?.[0]?.content?.[0]?.text || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
            
            console.log(`  ${index + 1}. Shape ID: ${note.id}`);
            console.log(`     DB ID: ${dbId}`);
            console.log(`     Title: "${title.substring(0, 30)}${title.length > 30 ? '...' : ''}"`);
        });
        
        console.log('='.repeat(40));
        console.log(`Total selected: ${selectedNotes.length} note(s)`);
    };
    
    // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ portal –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è —Å canvas)
    return ReactDOM.createPortal(
        <div 
            className="selection-context-menu"
            style={{
                position: 'fixed',
                left: menuPosition.x,
                top: menuPosition.y,
                transform: 'translateX(-50%)',
                background: 'rgba(26, 26, 26, 0.95)',
                border: '1px solid #444',
                borderRadius: '8px',
                padding: '6px',
                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.4)',
                backdropFilter: 'blur(10px)',
                zIndex: 10000,
                pointerEvents: 'auto',
                animation: 'fadeIn 0.15s ease-out',
                display: 'flex',
                flexDirection: 'row', // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                alignItems: 'center',
                gap: '4px',
            }}
        >
            {/* –°—á–µ—Ç—á–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ */}
            <div style={{
                fontSize: '11px',
                color: '#888',
                padding: '4px 8px',
                borderRight: '1px solid #444',
                whiteSpace: 'nowrap',
            }}>
                {selectedNotes.length}
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä—è–¥ */}
            <MenuButton 
                onClick={handleDuplicate}
                icon="üìã"
                tooltip="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å"
                compact
            />
            
            <MenuButton 
                onClick={handleExportToObsidian}
                icon="üì§"
                tooltip="–≠–∫—Å–ø–æ—Ä—Ç –≤ Obsidian"
                compact
            />
            
            <MenuButton 
                onClick={handleDelete}
                icon="üóëÔ∏è"
                tooltip="–£–¥–∞–ª–∏—Ç—å"
                danger
                compact
            />
            
            {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
            <div style={{ 
                width: '1px', 
                height: '20px',
                background: '#444', 
                margin: '0 2px' 
            }} />
            
            {/* Debug –∫–Ω–æ–ø–∫–∞ */}
            <MenuButton 
                onClick={handleLogIds}
                icon="üÜî"
                tooltip="Log IDs"
                secondary
                compact
            />
        </div>,
        document.body
    );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
function MenuButton({ onClick, icon, text, tooltip, danger = false, secondary = false, compact = false }) {
    const [isHovered, setIsHovered] = React.useState(false);
    
    return (
        <button
            onClick={onClick}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
            title={tooltip || text} // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            style={{
                padding: compact ? '4px 8px' : '6px 8px',
                background: isHovered 
                    ? (danger ? '#4a1a1a' : secondary ? '#2a2a2a' : '#3a3a3a')
                    : 'transparent',
                border: 'none',
                borderRadius: '4px',
                color: danger ? '#ff6b6b' : secondary ? '#888' : '#fff',
                fontSize: compact ? '16px' : '13px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: compact ? '0' : '8px',
                transition: 'all 0.15s ease',
                whiteSpace: 'nowrap',
            }}
        >
            <span style={{ fontSize: compact ? '18px' : '16px' }}>{icon}</span>
            {!compact && text && <span>{text}</span>}
        </button>
    );
}