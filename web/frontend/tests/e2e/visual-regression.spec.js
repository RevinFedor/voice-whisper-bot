import { test, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å timestamp
function getScreenshotName(baseName) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  return `${baseName}-${timestamp}.png`;
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
function saveScreenshotMetadata(screenshotPath, metadata) {
  const metadataPath = screenshotPath.replace('.png', '.json');
  fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));
}

test.describe('Visual Regression Tests', () => {
  test.beforeEach(async ({ page }) => {
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ dev —Å–µ—Ä–≤–µ—Ä–∞
    await page.waitForTimeout(2000);
  });

  test('Initial page load - full screenshot', async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('/');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ tldraw canvas
    await page.waitForSelector('.tl-container', { timeout: 30000 });
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await page.waitForTimeout(3000);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    await page.addStyleTag({
      content: '* { cursor: none !important; }'
    });
    
    // –î–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const screenshotName = 'initial-load-full';
    const screenshotPath = path.join('tests', 'screenshots', getScreenshotName(screenshotName));
    
    await page.screenshot({
      path: screenshotPath,
      fullPage: true,
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    saveScreenshotMetadata(screenshotPath, {
      testName: 'Initial page load - full screenshot',
      timestamp: new Date().toISOString(),
      viewport: page.viewportSize(),
      url: page.url(),
      userAgent: await page.evaluate(() => navigator.userAgent),
    });
    
    console.log(`‚úÖ Full page screenshot saved: ${screenshotPath}`);
  });

  test('Canvas area screenshot', async ({ page }) => {
    await page.goto('/');
    await page.waitForSelector('.tl-container', { timeout: 30000 });
    await page.waitForTimeout(3000);
    
    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç canvas
    const canvas = await page.locator('.tl-container');
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–∏ canvas
    const screenshotName = 'canvas-area';
    const screenshotPath = path.join('tests', 'screenshots', getScreenshotName(screenshotName));
    
    await canvas.screenshot({
      path: screenshotPath,
    });
    
    saveScreenshotMetadata(screenshotPath, {
      testName: 'Canvas area screenshot',
      timestamp: new Date().toISOString(),
      element: '.tl-container',
    });
    
    console.log(`‚úÖ Canvas screenshot saved: ${screenshotPath}`);
  });

  test('Check for date headers', async ({ page }) => {
    await page.goto('/');
    await page.waitForSelector('.tl-container', { timeout: 30000 });
    await page.waitForTimeout(3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–∞—Ç)
    const textShapes = await page.locator('[data-shape-type="text"]').all();
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –¥–∞—Ç
    const screenshotName = 'date-headers';
    const screenshotPath = path.join('tests', 'screenshots', getScreenshotName(screenshotName));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await page.screenshot({
      path: screenshotPath,
      clip: {
        x: 0,
        y: 0,
        width: 1920,
        height: 300
      }
    });
    
    saveScreenshotMetadata(screenshotPath, {
      testName: 'Date headers area',
      timestamp: new Date().toISOString(),
      textShapesCount: textShapes.length,
      description: 'Top area where date headers should appear',
    });
    
    console.log(`‚úÖ Date headers screenshot saved: ${screenshotPath}`);
    console.log(`   Found ${textShapes.length} text shapes`);
  });

  test('Check for custom note shapes', async ({ page }) => {
    await page.goto('/');
    await page.waitForSelector('.tl-container', { timeout: 30000 });
    await page.waitForTimeout(3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    const customNotes = await page.locator('[data-shape-type="custom-note"]').all();
    
    if (customNotes.length > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–≤–æ–π
      const firstNote = customNotes[0];
      const screenshotName = 'first-custom-note';
      const screenshotPath = path.join('tests', 'screenshots', getScreenshotName(screenshotName));
      
      await firstNote.screenshot({
        path: screenshotPath,
      });
      
      saveScreenshotMetadata(screenshotPath, {
        testName: 'First custom note shape',
        timestamp: new Date().toISOString(),
        totalNotes: customNotes.length,
      });
      
      console.log(`‚úÖ Custom note screenshot saved: ${screenshotPath}`);
    } else {
      console.log('‚ÑπÔ∏è No custom notes found on the page');
    }
    
    console.log(`   Found ${customNotes.length} custom note shapes`);
  });

  test('Visual comparison baseline', async ({ page }) => {
    await page.goto('/');
    await page.waitForSelector('.tl-container', { timeout: 30000 });
    await page.waitForTimeout(3000);
    
    // –°–æ–∑–¥–∞–µ–º baseline —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    const baselinePath = path.join('tests', 'screenshots', 'baseline.png');
    
    await page.screenshot({
      path: baselinePath,
      fullPage: false,
      animations: 'disabled',
    });
    
    saveScreenshotMetadata(baselinePath, {
      testName: 'Baseline screenshot for visual comparison',
      timestamp: new Date().toISOString(),
      purpose: 'baseline',
      viewport: page.viewportSize(),
    });
    
    console.log(`‚úÖ Baseline screenshot saved: ${baselinePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(fs.existsSync(baselinePath)).toBeTruthy();
  });
});

test.describe('HTML Elements Detection', () => {
  test('Analyze DOM structure', async ({ page }) => {
    await page.goto('/');
    await page.waitForSelector('.tl-container', { timeout: 30000 });
    await page.waitForTimeout(3000);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DOM
    const domAnalysis = await page.evaluate(() => {
      const analysis = {
        totalElements: document.querySelectorAll('*').length,
        customNotes: document.querySelectorAll('[data-shape-type="custom-note"]').length,
        textShapes: document.querySelectorAll('[data-shape-type="text"]').length,
        htmlContainers: document.querySelectorAll('.tl-html-container').length,
        svgElements: document.querySelectorAll('svg').length,
        canvasElements: document.querySelectorAll('canvas').length,
        interactiveElements: document.querySelectorAll('button, input, textarea, select').length,
        styles: {
          hasGradientBackground: !!document.querySelector('.tl-background'),
          customStyles: !!document.querySelector('style')?.textContent?.includes('custom-note'),
        },
        tldrawInfo: {
          container: !!document.querySelector('.tl-container'),
          editor: !!document.querySelector('.tl-editor'),
          shapes: document.querySelectorAll('[data-shape-type]').length,
        }
      };
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö shape —Ç–∏–ø–∞—Ö
      const shapeTypes = new Set();
      document.querySelectorAll('[data-shape-type]').forEach(el => {
        shapeTypes.add(el.getAttribute('data-shape-type'));
      });
      analysis.shapeTypes = Array.from(shapeTypes);
      
      return analysis;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ DOM
    const analysisPath = path.join('tests', 'screenshots', 'dom-analysis.json');
    fs.writeFileSync(analysisPath, JSON.stringify(domAnalysis, null, 2));
    
    // –î–µ–ª–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    const screenshotPath = path.join('tests', 'screenshots', getScreenshotName('dom-analysis'));
    await page.screenshot({
      path: screenshotPath,
      fullPage: false,
    });
    
    console.log('üìä DOM Analysis Results:');
    console.log(`   Total elements: ${domAnalysis.totalElements}`);
    console.log(`   Custom notes: ${domAnalysis.customNotes}`);
    console.log(`   Text shapes: ${domAnalysis.textShapes}`);
    console.log(`   HTML containers: ${domAnalysis.htmlContainers}`);
    console.log(`   Shape types found: ${domAnalysis.shapeTypes.join(', ')}`);
    console.log(`   Analysis saved to: ${analysisPath}`);
  });
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
test.describe('Screenshot Comparison', () => {
  test('Compare with baseline', async ({ page }) => {
    const baselinePath = path.join('tests', 'screenshots', 'baseline.png');
    
    if (!fs.existsSync(baselinePath)) {
      console.log('‚ö†Ô∏è No baseline screenshot found. Run tests first to create baseline.');
      return;
    }
    
    await page.goto('/');
    await page.waitForSelector('.tl-container', { timeout: 30000 });
    await page.waitForTimeout(3000);
    
    // –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const comparisonPath = path.join('tests', 'screenshots', getScreenshotName('comparison'));
    await page.screenshot({
      path: comparisonPath,
      fullPage: false,
      animations: 'disabled',
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ Playwright
    const baseline = fs.readFileSync(baselinePath);
    const comparison = fs.readFileSync(comparisonPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    const sizeDiff = Math.abs(baseline.length - comparison.length);
    const sizeDiffPercent = (sizeDiff / baseline.length) * 100;
    
    console.log('üìä Screenshot Comparison:');
    console.log(`   Baseline size: ${baseline.length} bytes`);
    console.log(`   Current size: ${comparison.length} bytes`);
    console.log(`   Size difference: ${sizeDiff} bytes (${sizeDiffPercent.toFixed(2)}%)`);
    
    if (sizeDiffPercent > 5) {
      console.log('‚ö†Ô∏è Significant difference detected (>5%)');
    } else {
      console.log('‚úÖ Screenshots are similar');
    }
  });
});