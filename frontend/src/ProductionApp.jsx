import React from 'react';
import { Tldraw, createShapeId } from 'tldraw';
import 'tldraw/tldraw.css';
import { CustomNoteShapeUtil } from './components/CustomNoteShape';
import { CustomControls } from './components/CustomControls';
import './utils/debugHelpers'; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç debug —Ñ—É–Ω–∫—Ü–∏–∏

// –ü–æ–ª–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–∞–∫ –≤ index-d.html
const customStyles = `
    /* –°–∫—Ä—ã–≤–∞–µ–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ UI */
    .tlui-layout__top,
    .tlui-layout__bottom,
    .tlui-toolbar,
    .tlui-style-panel,
    .tlui-panel,
    .tlui-menu,
    .tlui-button,
    .tlui-help-menu,
    .tlui-minimap,
    .tlui-page-menu,
    .tlui-zoom-menu,
    .tlui-navigation-panel,
    .tlui-quick-actions,
    .tlui-actions-menu,
    .tlui-context-menu,
    .tlui-main-menu,
    .tlui-share-panel,
    .tlui-debug-panel,
    .tlui-debug-menu,
    .tlui-menu-panel,
    .tlui-helper-buttons,
    [data-testid="main-menu"],
    [data-testid="tools-panel"],
    [data-testid="toolbar"],
    [data-testid="style-panel"],
    [data-testid="page-menu"],
    [data-testid="navigation-zone"],
    [data-testid="help-menu"],
    [data-testid="menu-panel"],
    .tlui-layout > div:first-child,
    .tlui-layout > div:last-child {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        pointer-events: none !important;
        height: 0 !important;
        width: 0 !important;
        overflow: hidden !important;
    }
    
    /* –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –∫–∞–∫ –≤ –º–∞–∫–µ—Ç–µ */
    .tl-background {
        background: 
            radial-gradient(circle at 20% 50%, #0a1a0a 0%, transparent 50%),
            radial-gradient(circle at 80% 80%, #1a0a1a 0%, transparent 50%),
            #0a0a0a !important;
    }
    
    /* –£–±–∏—Ä–∞–µ–º —Å–µ—Ç–∫—É */
    .tl-grid {
        display: none !important;
    }
    
    /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
    .tl-container {
        background: #0a0a0a;
    }
    
    /* –£–±–∏—Ä–∞–µ–º –≤—Å–µ handles –∏ UI —ç–ª–µ–º–µ–Ω—Ç—ã */
    .tl-handle,
    .tl-corner-handle,
    .tl-rotation-handle,
    .tl-mobile-rotate__bg,
    .tl-mobile-rotate__fg,
    .tl-selection__bg,
    .tl-selection__fg {
        opacity: 0.3 !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ */
    .custom-note {
        transition: all 0.2s ease !important;
    }
    
    .custom-note:hover {
        transform: scale(1.02);
        z-index: 100;
    }
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ richText —Ñ–æ—Ä–º–∞—Ç
function toRichText(text) {
    const lines = text.split('\n');
    const content = lines.map((line) => {
        if (!line) {
            return { type: 'paragraph' };
        }
        return {
            type: 'paragraph',
            content: [{ type: 'text', text: line }],
        };
    });
    return { type: 'doc', content };
}

// PRODUCTION –≤–µ—Ä—Å–∏—è - –ø–æ–ª–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
export default function ProductionApp() {
    const handleMount = (editor) => {
        console.log('üöÄ ProductionApp: Initializing...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º editor –¥–ª—è debug —Ñ—É–Ω–∫—Ü–∏–π
        window.editor = editor;
        window.saveEditor(editor);
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        setTimeout(() => {
            console.log('üìù Creating production notes...');
            
            // –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
            const voiceNotes = [
                { x: 100, y: 110, title: '–£—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏', content: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å\n–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è', time: '08:30', duration: '1:45' },
                { x: 350, y: 110, title: '–ù–∞—á–∞–ª–æ –¥–Ω—è', content: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á\nStandup meeting', time: '10:00', duration: '1:20' },
                { x: 600, y: 110, title: '–ò–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞', content: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Obsidian', time: '09:15', duration: '2:14' },
                { x: 850, y: 110, title: '–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É', content: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n–£—Ç–æ—á–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤', time: '14:00', duration: '15:30' },
            ];
            
            // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
            const textNotes = [
                { x: 100, y: 300, title: 'TODO —Å–ø–∏—Å–æ–∫', content: '- –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É\n- Code review', time: '09:15' },
                { x: 350, y: 300, title: '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π', content: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á', time: '11:00' },
                { x: 600, y: 300, title: '–ö–æ–¥ —Ä–µ–≤—å—é', content: 'PR #42: Fix validation\nPR #43: Add features', time: '14:30' },
                { x: 850, y: 300, title: '–ó–∞–º–µ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏', content: '–í–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n- –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ v3\n- –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω', time: '16:00' },
            ];
            
            // –ö–æ–ª–ª–µ–∫—Ü–∏–∏
            const collections = [
                { x: 100, y: 490, title: '–î–∏–∑–∞–π–Ω —Å–∏—Å—Ç–µ–º–∞', content: '5 –∑–∞–º–µ—Ç–æ–∫\n–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Ü–≤–µ—Ç–∞, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞', time: '12:00' },
                { x: 350, y: 490, title: 'API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', content: '12 –∑–∞–º–µ—Ç–æ–∫\nEndpoints, —Å—Ö–µ–º—ã, –ø—Ä–∏–º–µ—Ä—ã', time: '13:00' },
                { x: 600, y: 490, title: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', content: '3 –∑–∞–º–µ—Ç–∫–∏\n–ë–∞–∑–∞, API, Frontend', time: '11:00' },
            ];
            
            // –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
            voiceNotes.forEach((note) => {
                const id = createShapeId();
                editor.createShape({
                    id,
                    type: 'custom-note',
                    x: note.x,
                    y: note.y,
                    props: {
                        w: 180,
                        h: 150,
                        richText: toRichText(note.title + '\n\n' + note.content),
                        noteType: 'voice',
                        time: note.time,
                        duration: note.duration,
                    },
                });
            });
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
            textNotes.forEach((note) => {
                const id = createShapeId();
                editor.createShape({
                    id,
                    type: 'custom-note',
                    x: note.x,
                    y: note.y,
                    props: {
                        w: 180,
                        h: 150,
                        richText: toRichText(note.title + '\n\n' + note.content),
                        noteType: 'text',
                        time: note.time,
                    },
                });
            });
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections.forEach((note) => {
                const id = createShapeId();
                editor.createShape({
                    id,
                    type: 'custom-note',
                    x: note.x,
                    y: note.y,
                    props: {
                        w: 180,
                        h: 150,
                        richText: toRichText(note.title + '\n\n' + note.content),
                        noteType: 'collection',
                        time: note.time,
                    },
                });
            });
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã –∫–∞–∫ –≤ –º–∞–∫–µ—Ç–µ
            const dates = [
                { date: '07', month: '–ê–í–ì', x: 100, y: 50 },
                { date: '08', month: '–ê–í–ì', x: 350, y: 50 },
                { date: '09', month: '–ê–í–ì', x: 600, y: 50, isToday: true },
                { date: '10', month: '–ê–í–ì', x: 850, y: 50 },
            ];
            
            dates.forEach((dateInfo) => {
                editor.createShape({
                    id: createShapeId(),
                    type: 'text',
                    x: dateInfo.x,
                    y: dateInfo.y,
                    props: {
                        richText: toRichText(`${dateInfo.date}\n${dateInfo.month}`),
                        color: dateInfo.isToday ? 'green' : 'grey',
                        size: 'xl',
                        font: 'sans',
                        autoSize: true,
                        w: 50,
                        textAlign: 'middle',
                    },
                });
            });
            
            console.log('‚úÖ Created', editor.getCurrentPageShapes().length, 'shapes');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
            editor.setCamera({ x: 0, y: 0, z: 0.8 });
            
        }, 500);
    };
    
    return (
        <>
            <style>{customStyles}</style>
            <div style={{ 
                position: 'fixed', 
                inset: 0,
                background: '#0a0a0a',
                overflow: 'hidden'
            }}>
                <Tldraw
                    shapeUtils={[CustomNoteShapeUtil]}
                    onMount={handleMount}
                >
                    <CustomControls />
                </Tldraw>
            </div>
        </>
    );
}