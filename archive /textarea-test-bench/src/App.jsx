import React, { useState, useEffect, useRef } from 'react';
import ControlledTextarea from './solutions/ControlledTextarea';
import ContentEditableEditor from './solutions/ContentEditableEditor';
import HybridEditor from './solutions/HybridEditor';
import OptimizedLargeText from './solutions/OptimizedLargeText';
import FixedCursorTextarea from './solutions/FixedCursorTextarea';
import FinalTextareaSolution from './solutions/FinalTextareaSolution';
import PerformanceMonitor from './components/PerformanceMonitor';
import { generateTestText } from './utils/testData';

const SOLUTIONS = {
  controlled: {
    name: 'Controlled Textarea —Å —Ñ–∏–∫—Å–æ–º —Å–∫—Ä–æ–ª–ª–∞',
    description: 'useLayoutEffect + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ scrollTop –∏ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞',
    component: ControlledTextarea
  },
  fixedcursor: {
    name: '–§–∏–∫—Å –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ 0 –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ',
    description: '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–±—Ä–æ—Å–∞ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 0 –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏',
    component: FixedCursorTextarea
  },
  contenteditable: {
    name: 'ContentEditable —Ä–µ—à–µ–Ω–∏–µ',
    description: 'div —Å contentEditable="true" –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è',
    component: ContentEditableEditor
  },
  hybrid: {
    name: 'Hybrid View/Edit —Ä–µ–∂–∏–º',
    description: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    component: HybridEditor
  },
  optimized: {
    name: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤',
    description: '–° debounce –∏ requestAnimationFrame –¥–ª—è 5000+ —Å–∏–º–≤–æ–ª–æ–≤',
    component: OptimizedLargeText
  },
  final: {
    name: 'üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
    description: '–í—Å–µ —Ñ–∏–∫—Å—ã: —Å–∫—Ä–æ–ª–ª, –∫—É—Ä—Å–æ—Ä 0, Enter, –±–æ–ª—å—à–∏–µ —Ç–µ–∫—Å—Ç—ã. –ì–æ—Ç–æ–≤–æ –¥–ª—è production',
    component: FinalTextareaSolution
  }
};

function App() {
  const [selectedSolution, setSelectedSolution] = useState('final');
  const [text, setText] = useState(generateTestText(5000));
  const [metrics, setMetrics] = useState({
    fps: 60,
    inputLag: 0,
    memoryUsage: 0,
    scrollStability: 100,
    renderTime: 0
  });
  
  const startTimeRef = useRef(Date.now());
  const frameCountRef = useRef(0);
  const lastFrameTimeRef = useRef(Date.now());

  // FPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  useEffect(() => {
    let animationId;
    
    const calculateFPS = () => {
      frameCountRef.current++;
      const now = Date.now();
      const delta = now - lastFrameTimeRef.current;
      
      if (delta >= 1000) {
        const fps = Math.round((frameCountRef.current * 1000) / delta);
        setMetrics(prev => ({ ...prev, fps: Math.min(fps, 60) }));
        frameCountRef.current = 0;
        lastFrameTimeRef.current = now;
      }
      
      animationId = requestAnimationFrame(calculateFPS);
    };
    
    animationId = requestAnimationFrame(calculateFPS);
    
    return () => cancelAnimationFrame(animationId);
  }, []);

  // Memory usage –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  useEffect(() => {
    const checkMemory = () => {
      if (performance.memory) {
        const usedMemory = Math.round(performance.memory.usedJSHeapSize / 1048576);
        setMetrics(prev => ({ ...prev, memoryUsage: usedMemory }));
      }
    };
    
    const interval = setInterval(checkMemory, 1000);
    return () => clearInterval(interval);
  }, []);

  const handleTextChange = (newText) => {
    const startTime = performance.now();
    setText(newText);
    const endTime = performance.now();
    const lag = Math.round(endTime - startTime);
    setMetrics(prev => ({ ...prev, inputLag: lag }));
  };

  const loadTestText = (size) => {
    const startTime = performance.now();
    const newText = generateTestText(size);
    setText(newText);
    const endTime = performance.now();
    setMetrics(prev => ({ 
      ...prev, 
      renderTime: Math.round(endTime - startTime) 
    }));
  };

  const CurrentSolution = SOLUTIONS[selectedSolution].component;

  return (
    <div className="container">
      <div className="header">
        <h1>üß™ Textarea Scroll Test Bench</h1>
        <p style={{ marginTop: '10px', color: '#888' }}>
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å–∫—Ä–æ–ª–ª–∞ –≤ textarea —Å –±–æ–ª—å—à–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        </p>
      </div>

      <div className="control-panel">
        <div>
          <label style={{ marginRight: '10px', fontSize: '14px' }}>–†–µ—à–µ–Ω–∏–µ:</label>
          <select 
            value={selectedSolution} 
            onChange={(e) => setSelectedSolution(e.target.value)}
            style={{
              background: '#0a0a0a',
              color: '#e0e0e0',
              border: '1px solid #333',
              padding: '6px 12px',
              borderRadius: '6px',
              fontSize: '14px'
            }}
          >
            {Object.entries(SOLUTIONS).map(([key, solution]) => (
              <option key={key} value={key}>{solution.name}</option>
            ))}
          </select>
        </div>

        <div className="button-group">
          <button onClick={() => loadTestText(1000)}>1K —Å–∏–º–≤–æ–ª–æ–≤</button>
          <button onClick={() => loadTestText(3000)}>3K —Å–∏–º–≤–æ–ª–æ–≤</button>
          <button onClick={() => loadTestText(5000)}>5K —Å–∏–º–≤–æ–ª–æ–≤</button>
          <button onClick={() => loadTestText(10000)}>10K —Å–∏–º–≤–æ–ª–æ–≤</button>
          <button className="secondary" onClick={() => setText('')}>–û—á–∏—Å—Ç–∏—Ç—å</button>
        </div>
      </div>

      <PerformanceMonitor metrics={metrics} />

      <div className="editor-container">
        <div className="solution-title">{SOLUTIONS[selectedSolution].name}</div>
        <div className="solution-description">{SOLUTIONS[selectedSolution].description}</div>
        
        <CurrentSolution 
          value={text} 
          onChange={handleTextChange}
        />

        <div className="info-panel">
          <div>–°–∏–º–≤–æ–ª–æ–≤: {text.length}</div>
          <div>–°—Ç—Ä–æ–∫: {text.split('\n').length}</div>
          <div>–°–ª–æ–≤: {text.split(/\s+/).filter(w => w).length}</div>
        </div>
      </div>
    </div>
  );
}

export default App;