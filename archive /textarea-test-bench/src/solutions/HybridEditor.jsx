import React, { useState, useRef, useLayoutEffect } from 'react';

// –†–ï–®–ï–ù–ò–ï 3: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —Ä–µ–∂–∏–º–∞–º–∏ View/Edit
const HybridEditor = ({ value, onChange }) => {
  const [isEditMode, setIsEditMode] = useState(false);
  const [localValue, setLocalValue] = useState(value);
  const textAreaRef = useRef(null);
  const viewRef = useRef(null);
  const [cursor, setCursor] = useState(0);
  const [scrollTop, setScrollTop] = useState(0);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º value
  useLayoutEffect(() => {
    if (value !== localValue) {
      setLocalValue(value);
    }
  }, [value]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useLayoutEffect(() => {
    if (isEditMode && textAreaRef.current) {
      console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      const textArea = textAreaRef.current;
      
      // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ textarea
      textArea.focus();
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
      textArea.setSelectionRange(cursor, cursor);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
      textArea.scrollTop = scrollTop;
    }
  }, [isEditMode, cursor, scrollTop]);

  const handleEditClick = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –∏–∑ view —Ä–µ–∂–∏–º–∞
    if (viewRef.current) {
      setScrollTop(viewRef.current.scrollTop);
    }
    setIsEditMode(true);
  };

  const handleSave = () => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
    onChange && onChange(localValue);
    setIsEditMode(false);
  };

  const handleCancel = () => {
    console.log('‚ùå –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    setLocalValue(value);
    setIsEditMode(false);
  };

  const handleTextChange = (e) => {
    setCursor(e.target.selectionStart);
    setScrollTop(e.target.scrollTop);
    setLocalValue(e.target.value);
  };

  const handleKeyDown = (e) => {
    // Ctrl+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (e.ctrlKey && e.key === 's') {
      e.preventDefault();
      handleSave();
    }
    // Escape –¥–ª—è –æ—Ç–º–µ–Ω—ã
    if (e.key === 'Escape') {
      handleCancel();
    }
  };

  if (!isEditMode) {
    // VIEW MODE
    return (
      <div>
        <div style={{ marginBottom: '10px' }}>
          <button onClick={handleEditClick} style={{ marginRight: '10px' }}>
            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </button>
          <span style={{ fontSize: '12px', color: '#666' }}>
            –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </span>
        </div>
        <div
          ref={viewRef}
          onClick={handleEditClick}
          style={{
            width: '100%',
            minHeight: '400px',
            maxHeight: '600px',
            overflow: 'auto',
            background: '#0a0a0a',
            color: '#e0e0e0',
            border: '1px solid #333',
            borderRadius: '6px',
            padding: '12px',
            fontSize: '14px',
            fontFamily: 'monospace',
            lineHeight: '1.5',
            whiteSpace: 'pre-wrap',
            wordWrap: 'break-word',
            cursor: 'pointer'
          }}
        >
          {localValue || <span style={{ color: '#666' }}>–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...</span>}
        </div>
      </div>
    );
  }

  // EDIT MODE
  return (
    <div>
      <div style={{ marginBottom: '10px' }}>
        <button onClick={handleSave} style={{ marginRight: '10px' }}>
          üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
        <button onClick={handleCancel} className="secondary" style={{ marginRight: '10px' }}>
          ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
        </button>
        <span style={{ fontSize: '12px', color: '#666' }}>
          –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - Ctrl+S –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, Esc –¥–ª—è –æ—Ç–º–µ–Ω—ã
        </span>
      </div>
      <textarea
        ref={textAreaRef}
        value={localValue}
        onChange={handleTextChange}
        onKeyDown={handleKeyDown}
        style={{
          width: '100%',
          minHeight: '400px',
          background: '#0a0a0a',
          color: '#e0e0e0',
          border: '2px solid #2563eb',
          borderRadius: '6px',
          padding: '12px',
          fontSize: '14px',
          fontFamily: 'monospace',
          resize: 'vertical',
          lineHeight: '1.5',
          outline: 'none'
        }}
      />
      <div style={{ marginTop: '10px', fontSize: '12px', color: '#666' }}>
        ‚úÖ –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º!
      </div>
    </div>
  );
};

export default HybridEditor;