import React, { useRef, useLayoutEffect, useState, useCallback } from 'react';

// –†–ï–®–ï–ù–ò–ï 2: ContentEditable —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
const ContentEditableEditor = ({ value, onChange }) => {
  const contentRef = useRef(null);
  const [localValue, setLocalValue] = useState(value);
  const selectionRef = useRef({ start: 0, end: 0 });
  const scrollRef = useRef(0);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ value —Å –ª–æ–∫–∞–ª—å–Ω—ã–º
  useLayoutEffect(() => {
    if (value !== localValue) {
      setLocalValue(value);
    }
  }, [value]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –∏ —Å–∫—Ä–æ–ª–ª–∞
  useLayoutEffect(() => {
    const element = contentRef.current;
    if (!element) return;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    if (element.innerText !== localValue) {
      element.innerText = localValue;
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
    element.scrollTop = scrollRef.current;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ (—Å–ª–æ–∂–Ω–µ–µ —á–µ–º –≤ textarea)
    try {
      const selection = window.getSelection();
      const range = document.createRange();
      
      if (element.firstChild) {
        const textNode = element.firstChild;
        const maxLength = textNode.textContent.length;
        const position = Math.min(selectionRef.current.start, maxLength);
        
        range.setStart(textNode, position);
        range.setEnd(textNode, position);
        selection.removeAllRanges();
        selection.addRange(range);
      }
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞:', e);
    }
  }, [localValue]);

  const saveSelection = useCallback(() => {
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const element = contentRef.current;
      
      if (element && element.contains(range.commonAncestorContainer)) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
        const text = element.innerText;
        const beforeRange = range.cloneRange();
        beforeRange.selectNodeContents(element);
        beforeRange.setEnd(range.startContainer, range.startOffset);
        
        const beforeText = beforeRange.toString();
        selectionRef.current = {
          start: beforeText.length,
          end: beforeText.length
        };
      }
    }
  }, []);

  const handleInput = useCallback((e) => {
    const element = contentRef.current;
    if (!element) return;

    console.log('üìù ContentEditable –∏–∑–º–µ–Ω–µ–Ω–∏–µ');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –∏ —Å–∫—Ä–æ–ª–ª–∞
    saveSelection();
    scrollRef.current = element.scrollTop;
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ HTML)
    const newText = element.innerText;
    setLocalValue(newText);
    
    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π onChange
    onChange && onChange(newText);
  }, [onChange, saveSelection]);

  const handleScroll = (e) => {
    scrollRef.current = e.target.scrollTop;
  };

  const handlePaste = (e) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å—Ç–∞–≤–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    e.preventDefault();
    const text = e.clipboardData.getData('text/plain');
    document.execCommand('insertText', false, text);
  };

  return (
    <div>
      <div
        ref={contentRef}
        contentEditable
        suppressContentEditableWarning
        onInput={handleInput}
        onScroll={handleScroll}
        onPaste={handlePaste}
        onKeyUp={saveSelection}
        onMouseUp={saveSelection}
        className="contenteditable"
        style={{
          width: '100%',
          minHeight: '400px',
          maxHeight: '600px',
          overflow: 'auto',
          background: '#0a0a0a',
          color: '#e0e0e0',
          border: '1px solid #333',
          borderRadius: '6px',
          padding: '12px',
          fontSize: '14px',
          fontFamily: 'monospace',
          lineHeight: '1.5',
          whiteSpace: 'pre-wrap',
          wordWrap: 'break-word',
          outline: 'none'
        }}
      />
      <div style={{ marginTop: '10px', fontSize: '12px', color: '#666' }}>
        ‚ö†Ô∏è ContentEditable: –º–µ–¥–ª–µ–Ω–Ω–µ–µ textarea, –Ω–æ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      </div>
    </div>
  );
};

export default ContentEditableEditor;